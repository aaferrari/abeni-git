#!/usr/bin/env python
# -*- coding: ANSI_X3.4-1968 -*-
# generated by wxGlade 0.3.5.1 on Tue Jan 11 00:02:35 2005

import shutil
import sys
import os

import wx

from FileBrowser import CvsBrowser
from MyLog import MyLog
import MetadataXMLDialog
import utils
import cvs_utils


class MyFrame(wx.Frame):

    """Repoman console for scan/full/commit, metadata editting"""

    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.repoman_console_menubar = wx.MenuBar()
        self.SetMenuBar(self.repoman_console_menubar)
        global exitID; exitID = wx.NewId()
        global copyID; copyID = wx.NewId()
        global filesID; filesID = wx.NewId()
        global cvsupID; cvsupID = wx.NewId()
        global addID; addID = wx.NewId()
        global rmID; rmID = wx.NewId()
        global scanID; scanID = wx.NewId()
        global fullID; fullID = wx.NewId()
        global pretendID; pretendID = wx.NewId()
        global commitID; commitID = wx.NewId()
        global echangelogID; echangelogID = wx.NewId()
        global digestID; digestID = wx.NewId()
        global metadataID; metadataID = wx.NewId()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(exitID, "E&xit\tAlt-x", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(copyID, "&Copy ebuild from overlay\tF2", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(filesID, "Copy from &FILESDIR in overlay\tF3", "", wx.ITEM_NORMAL)
        self.repoman_console_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(cvsupID, "&update\tF1", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(addID, "&add file\tF4", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(rmID, "&rm and cvs remove file", "", wx.ITEM_NORMAL)
        self.repoman_console_menubar.Append(wxglade_tmp_menu, "&CVS")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(scanID, "&scan\tShift-F8", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(fullID, "&full\tF8", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(pretendID, "&pretend commit\tF9", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(commitID, "&commit\tF10", "", wx.ITEM_NORMAL)
        self.repoman_console_menubar.Append(wxglade_tmp_menu, "&repoman")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(echangelogID, "e&changelog\tF5", "", wx.ITEM_NORMAL)
        self.repoman_console_menubar.Append(wxglade_tmp_menu, "echange&log")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(digestID, "create &digest\tF7", "", wx.ITEM_NORMAL)
        self.repoman_console_menubar.Append(wxglade_tmp_menu, "&ebuild")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(metadataID, "&edit metadata\tF6", "", wx.ITEM_NORMAL)
        self.repoman_console_menubar.Append(wxglade_tmp_menu, "&metadata")
        # Menu Bar end
        self.repoman_console_statusbar = self.CreateStatusBar(1, 0)
        self.button_cvs_up = wx.Button(self, -1, "cvs update F1")
        self.button_copy_olay = wx.Button(self, -1, "Copy ebuild from overlay F2")
        self.button_filesdir = wx.Button(self, -1, "Copy from FILESDIR F3")
        self.button_cvs_add = wx.Button(self, -1, "cvs add file F4")
        self.button_echangelog = wx.Button(self, -1, "echangelog F5")
        self.button_metadata = wx.Button(self, -1, "Edit metadata F6")
        self.button_digest = wx.Button(self, -1, "Create digest F7")
        self.button_repoman_full = wx.Button(self, -1, "repoman full F8")
        self.button_commit_pretend = wx.Button(self, -1, "repoman pretend commit F9")
        self.button_commit = wx.Button(self, -1, "repoman commit F10")
        self.text_ctrl_log = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.label_dir = wx.StaticText(self, -1, "CVS dir:")
        self.fileBrowser = CvsBrowser(self, )

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Repoman Console")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("/usr/share/pixmaps/abeni/abeni_logo16.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((891, 618))
        self.repoman_console_statusbar.SetStatusWidths([-1])
        # statusbar fields
        repoman_console_statusbar_fields = [""]
        for i in range(len(repoman_console_statusbar_fields)):
            self.repoman_console_statusbar.SetStatusText(repoman_console_statusbar_fields[i], i)
        self.button_cvs_up.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.button_cvs_up, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_copy_olay, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_filesdir, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_cvs_add, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_echangelog, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_metadata, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_digest, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_repoman_full, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_commit_pretend, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_3.Add(self.button_commit, 0, wx.BOTTOM|wx.EXPAND|wx.FIXED_MINSIZE, 8)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.EXPAND, 10)
        sizer_4.Add(self.text_ctrl_log, 1, wx.ALL|wx.EXPAND|wx.FIXED_MINSIZE, 4)
        sizer_4.Add(self.label_dir, 0, wx.LEFT|wx.FIXED_MINSIZE, 2)
        sizer_4.Add(self.fileBrowser, 1, wx.ALL|wx.EXPAND, 4)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

        self.__my_layout()

    def __my_layout(self):
        """Customize frame, add events"""
        wx.EVT_MENU(self, cvsupID, self.OnCvsUp) 
        wx.EVT_MENU(self, exitID, self.OnClose)
        wx.EVT_MENU(self, copyID, self.OnCopyOlay)
        wx.EVT_MENU(self, filesID, self.OnFilesdir)
        wx.EVT_MENU(self, addID, self.OnCvsAdd)
        wx.EVT_MENU(self, scanID, self.OnRepoScan)
        wx.EVT_MENU(self, fullID, self.OnRepoFull)
        wx.EVT_MENU(self, pretendID, self.OnCommitPretend)
        wx.EVT_MENU(self, commitID, self.OnCommit)
        wx.EVT_MENU(self, echangelogID, self.OnEchangelog)
        wx.EVT_MENU(self, digestID, self.OnDigest)
        wx.EVT_MENU(self, metadataID, self.OnMetadata)

        wx.EVT_BUTTON(self, self.button_cvs_up.GetId(), self.OnCvsUp) 
        wx.EVT_BUTTON(self, self.button_copy_olay.GetId(), self.OnCopyOlay) 
        wx.EVT_BUTTON(self, self.button_filesdir.GetId(), self.OnFilesdir) 
        wx.EVT_BUTTON(self, self.button_cvs_add.GetId(), self.OnCvsAdd) 
        wx.EVT_BUTTON(self, self.button_metadata.GetId(), self.OnMetadata) 
        wx.EVT_BUTTON(self, self.button_echangelog.GetId(), self.OnEchangelog) 
        wx.EVT_BUTTON(self, self.button_digest.GetId(), self.OnDigest) 
        wx.EVT_BUTTON(self, self.button_repoman_full.GetId(), self.OnRepoFull) 
        wx.EVT_BUTTON(self, self.button_commit_pretend.GetId(),
                      self.OnCommitPretend) 
        wx.EVT_BUTTON(self, self.button_commit.GetId(), self.OnCommit) 
        
        wx.EVT_CLOSE(self, self.OnClose)
        wx.EVT_END_PROCESS(self, -1, self.OnProcessEnded)

        self.process = None
        self.running = None
        self.action = None

        points = self.text_ctrl_log.GetFont().GetPointSize()
        f = wx.Font(points, wx.MODERN, wx.NORMAL, True)
        self.text_ctrl_log.SetDefaultStyle(wx.TextAttr("BLACK",
                                                       wx.NullColour, f)
                                           )
        wx.Log_SetActiveTarget(MyLog(self.text_ctrl_log))
        self.Write("))) Repoman console ready.")

        self.cvs_root = self.GetParent().pref["cvsRoot"]
        frame = self.GetParent()
        self.cat = utils.get_category_name(frame)
        self.pn = utils.get_pn(frame)
        ebuild_path = frame.filename[frame.ed_shown]
        ebuild_basename = os.path.basename(ebuild_path)
        self.cvs_ebuild_dir = self.QueryDir()
        self.cvs_ebuild_path = "%s/%s" % (self.cvs_ebuild_dir, ebuild_basename)
        self.orig_ebuild_path = ebuild_path
        self.overlay_dir = os.path.dirname(ebuild_path)
        self.changelog_msg = ""
        self.cur_dir = os.getcwd()
        if not os.path.exists(self.cvs_ebuild_dir):
            wx.CallAfter(self.AddNewPkg)
        else:
            os.chdir(self.cvs_ebuild_dir)
            self.RefreshBrowser()


    def AddNewPkg(self):
        """Create dir and add to cvs if this is a new package"""
        self.Write("))) Creating pkg directory and adding it to CVS...")
        os.mkdir(self.cvs_ebuild_dir)
        os.chdir(os.path.normpath(self.cvs_ebuild_dir + "/.."))
        self.action = "new_pkg"
        cmd = "cvs add %s" % os.path.basename(self.cvs_ebuild_dir)
        self.ExecuteInLog(cmd)

    def OnEchangelog(self, event):
        """Dialog for echangelog, with bugz#"""
        value = "bug# %s" % self.bugz
        result = self.GetMsg("Enter echangelog message                     ",
                             "Enter echangelog message", value)
        if not result:
            return
        cmd = 'echangelog "%s"' % self.changelog_msg
        self.ExecuteInLog(cmd)

    def GetMsg(self, caption, title, value):
        """Dialog for single line input"""
        dlg = wx.TextEntryDialog(self, caption, title, value)
        if dlg.ShowModal() == wx.ID_OK:
            self.changelog_msg = dlg.GetValue()
            dlg.Destroy()
            return 1
        else:
            dlg.Destroy()
            return 0

    def DoFilesdir(self):
        """Copy files from overlay ${FILESDIR} to CVS ${FILESDIR} """
        p = '%s/files' % utils.get_ebuild_dir(self.parent)
        if not os.path.exists(p):
            return 0
        files = os.listdir(p)
        def strp(s): return s.strip()
        files = map(strp, files )
        files = filter(None, files)
        files.sort()
        my_files = []
        for f in files:
            if f[:7] != "digest-":
                my_files.append(f)
        if not my_files:
            return 0
        dlg = wx.MultipleChoiceDialog(self.parent, 'Choose one or more:', '${FILESDIR}', my_files)
        if dlg.ShowModal() == wx.ID_OK:
            files = dlg.GetValueString()
        else:
            dlg.Destroy()
            return 0

        filesdir = "%s/files" % self.overlay_dir
        cvs_filesdir = "%s/files/" % self.cvs_ebuild_dir 
        try:
            os.mkdir(cvs_filesdir)
        except:
            self.parent.Write("!!! Failed to create dir: %s " % cvs_filesdir)
            return "error"
        for f in files:
            fpath = "%s/%s" % (filesdir, f)
            try:
                shutil.copy(fpath, cvs_filesdir)
                self.parent.Write("))) Copied: %s " % f)
            except:
                self.parent.Write("!!! Failed to copy %s from %s" % (f, filesdir))
                return "error"
            self.CVSAdd("files/%s" % f)
        return 1

    def QueryDir(self):
        """Return CVS directory of this ebuild"""
        return "%s/%s/%s" % (self.cvs_root, self.cat, self.pn)

    def CreateCVSdir(self):
        """Create CVSroot/category/package directory"""
        try:
            #self.SyncExecute("mkdir %s" % self.cvs_ebuild_dir)
            #self.SyncExecute("mkdir %s/files" % self.cvs_ebuild_dir)
            return 1
        except:
            return 0

    def CvsUpdate(self):
        """cvs update"""
        cmd = "cvs update"
        self.ExecuteInLog(cmd)

    def Repoman(self, cmd):
        """preform repoman command"""
        cmd = "repoman %s" % (cmd)
        self.Execute(cmd)

    def CreateDigest(self):
        cmd = "ebuild %s digest" % os.path.basename(self.cvs_ebuild_path)
        self.SyncExecute(cmd)

    def OnCvsUp(self, event):
        """"""
        self.CvsUpdate()

    def OnCopyOlay(self, event):
        """Copy ebuild from PORT_OVERLAY to CVSroot/category/package/"""
        #TODO: Catch exact exceptions
        # Confirm if file exists. Offer to show diff
        shutil.copy(self.orig_ebuild_path, self.cvs_ebuild_dir)
        self.Write("))) Copied %s to %s" % (self.orig_ebuild_path,
                   self.cvs_ebuild_dir))
        self.RefreshBrowser()

    def EditFile(self):
        """Edit selected file in external editor"""
        app = self.GetParent().pref['editor']
        try:
            #get full path to selected file:
            filename = self.fileBrowser.getFilename()
        except IndexError:
            self.Write("!!! Select a file to edit.")
            return
        os.system("%s %s &" % (app, filename))

    def SetNotesInfo(self, bugz, notes):
        """Set bugz nbr and notes txt"""
        self.bugz = bugz
        self.notes = notes

    def OnFilesdir(self, event):
        """"""
        print "pass"

    def CvsRemove(self):
        """cvs remove selected file"""
        #get full path to selected file:
        #TODO: Do sanity checking, so we only add files for this pkg 
        try:
            #get full path to selected file:
            filename = self.fileBrowser.getFilename()
        except IndexError:
            self.Write("!!! Select a file to remove from cvs.")
            return
        cmd = "cvs remove %s" % os.path.basename(filename)
        self.ExecuteInLog(cmd)

    def OnCvsAdd(self, event):
        """cvs add selected file"""
        #get full path to selected file:
        #TODO: Do sanity checking, so we only add files for this pkg 
        # We could modify browser to not allow cd'ing out of pkg dir
        try:
            #get full path to selected file:
            filename = self.fileBrowser.getFilename()
        except IndexError:
            self.Write("!!! Select a file to add to cvs.")
            return
        cmd = "cvs add %s" % os.path.basename(filename)
        self.ExecuteInLog(cmd)

    def OnMetadata(self, event):
        """Create metadata.xml"""
        dlg = MetadataXMLDialog.MyDialog(self, -1, "metadata.xml")
        dlg.Show(True)

    def OnDigest(self, event):
        """create digest for selected ebuild"""
        try:
            #get full path to selected file:
            filename = self.fileBrowser.getFilename()
        except IndexError:
            self.Write("!!! Select an ebuild so I can create a digest.")
            return
        if filename[-7:] == ".ebuild":
            rel_name = "./%s" % os.path.basename(filename)
            cmd = "ebuild %s digest" % rel_name
            self.ExecuteInLog(cmd)
        else:
            self.Write("!!! I'll only create digests for ebuilds.")

    def OnRepoScan(self, event):
        """repoman full"""
        self.ExecuteInLog("repoman scan")

    def OnRepoFull(self, event):
        """repoman full"""
        self.ExecuteInLog("repoman full")

    def OnCommitPretend(self, event):
        """Get commit msg, repoman --pretend commit msg"""
        result = self.GetMsg("Enter commit message                     ",
                             "Enter commit message", self.changelog_msg)
        if not result:
            self.Write("!!! repoman --pretend commit cancelled")
            return
        cmd = 'repoman --pretend commit -m \\"%s\\"' % self.changelog_msg
        self.ExecuteInLog(cmd)

    def OnCommit(self, event):
        """Get commit msg, repoman commit msg"""
        result = self.GetMsg("Enter commit message                     ",
                             "Enter commit message", self.changelog_msg)
        if not result:
            self.Write("!!! repoman commit cancelled")
            return
        cmd = 'repoman commit -m \\"%s\\"' % self.changelog_msg
        self.ExecuteInLog(cmd)

    def OnClose(self, event):
        """Clean up"""
        parent = self.GetParent()
        parent.SetLog()
        os.chdir(self.cur_dir)
        self.Destroy()

    def Write(self, txt):
        """Send text to log window"""
        #Ouch
        #wx.Log_SetActiveTarget(MyLog(self.text_ctrl_log))
        #print txt
        self.WriteText(txt)

    def WriteText(self, text):
        """Send text to log window after colorizing"""
        #self.logfile.write(text + "\n")

        if text[-1:] == '\n':
            text = text[:-1]
        #Remove color and other esc codes
        text = text.replace('\b', '')
        # For the [ok]'s
        text = text.replace("\x1b[A", '')
        text = text.replace("\x1b[-7G", '')
        text = text.replace("\x1b[73G", '')
        pref = text[0:3]
        if pref == ">>>" or pref == "<<<" or pref == "---" \
             or pref == ")))" or  pref == " * ":
            self.LogColor("BLUE")
            wx.LogMessage(text)
            self.LogColor("BLACK")
        elif pref == "!!!":
            self.LogColor("RED")
            wx.LogMessage(text)
            self.LogColor("BLACK")
        else:
            wx.LogMessage(text)

    def LogColor(self, color):
        """Set color of text sent to log window"""
        self.text_ctrl_log.SetDefaultStyle(wx.TextAttr(wx.NamedColour(color)))

    def ExecuteInLog(self, cmd, log_msg=''):
        """Run program asynchronously sending stdout & stderr to log window"""
        if self.running:
            msg = "!!! Please wait till this finishes:\n %s" % self.running
            self.Write(msg)
            return
        if log_msg:
            self.Write(log_msg)
        self.running = cmd
        self.process = wx.Process(self)
        self.process.Redirect();
        module_path = "/usr/lib/python%s/site-packages/abeni" % sys.version[0:3]
        py_cmd = "python -u %s/doCmd.py %s" % (module_path, cmd)
        self.pid = wx.Execute(py_cmd, wx.EXEC_ASYNC, self.process)
        self.Write(cmd)
        #Start timer to keep GUI updated:
        ID_Timer = wx.NewId()
        self.timer = wx.Timer(self, ID_Timer)
        wx.EVT_TIMER(self,  ID_Timer, self.HandleIdle)
        self.timer.Start(100)

    def HandleIdle(self, event):
        """Keep GUI fresh while executing async commands"""
        if self.process is not None:
            stream = self.process.GetInputStream()
            if stream.CanRead():
                t = stream.readline()
                self.Write(t)
            stream = self.process.GetErrorStream()
            if stream.CanRead():
                t = stream.readline()
                self.Write(t)

    def OnProcessEnded(self, evt):
        """Clean up after async command finishes"""
        self.timer.Stop()
        stream = self.process.GetInputStream()
        if stream.CanRead():
            text = stream.read()
            text = text.split('\n')
            for t in text:
                self.Write(t)
        self.process.Destroy()
        self.process = None
        self.running = None
        action = self.action
        self.action = None
        self.PostAction(action)

    def PostAction(self, action):
        """Perform something after async cmd finishes"""
        if action == "new_pkg":
            os.chdir(self.cvs_ebuild_dir)
        self.Write("))) Done.")
        self.RefreshBrowser()

    def MarkNonCvs(self):
        """Mark files not added to cvs as red lines"""
        not_added = cvs_utils.get_non_added(self.cvs_ebuild_dir)
        for filename in not_added:
            self.fileBrowser.setColor(filename, wx.RED)

    def RefreshBrowser(self):
        """Populate file browser"""
        if os.path.exists(self.cvs_ebuild_dir):
            self.fileBrowser.populate(self.cvs_ebuild_dir)
            #self.MarkNonCvs()
            self.fileBrowser.list.SetColumnWidth(0, wx.LIST_AUTOSIZE)

# end of class MyFrame


