#!/usr/bin/python

"""

This module is for doing all portage related work as root

app-portage/abeni runs this as sudo 

It may only modify, delete or change permissions for files in:
    PORTAGE_TMPDIR, FILESDIR or PORTDIR_OVERLAY

Actions abex does:
   All /usr/bin/ebuild and /usr/bin/emerge actions 
   All file permission changes in ${WORKDIR}
   All file removal in PORTDIR_OVERLAY and FILESDIR

Notes on security:
  All the functions use paths from /etc/make.conf, you can't
  pass paths to any functions in this module when deleting
  or changing permissions, only package names and categories

  The only time you can pass a path to a function in this module
  is for /usr/bin/ebuild, which takes a path to an ebuild

"""

import os
import sys
import commands
from optparse import *


if os.getuid() != 0:
    print "You must be root to run this."
    sys.exit(1)

debug = 1

def get_overlay():
    """Returns PORTAGE_TMPDIR from /etc/make.conf"""
    cmd = "source /etc/make.conf;echo ${PORTDIR_OVERLAY}"
    portdir_overlay = commands.getoutput(cmd).split(" ")[0]
    if portdir_overlay[-1] == "/":
        portdir_overlay = portdir_overlay[:-1]
    return portdir_overlay

def get_tmpdir():
    """Returns PORTAGE_TMPDIR from /etc/make.conf"""
    cmd = "source /etc/make.conf;echo ${PORTAGE_TMPDIR}"
    return commands.getoutput(cmd)

# Getting it from portage.settings is too slow, thus:
PORTDIR_OVERLAY = get_overlay()
PORTAGE_TMPDIR = get_tmpdir()

def check_bad_dirs(my_dir):
    #TODO: Check p for ".." ?
    if not os.path.exists(my_dir):
        print "Dir does not exist: %s" % my_dir
        return 1
    if not os.path.isdir(my_dir):
        print "%s is not a directory!" % my_dir
        return 1

def do_ebuild(args):
    """ebuild <filename> <cmd>"""
    if debug:
        print "abex do_ebuild: %s" % args
    filename, ebuild_cmd = args.split(",")
    cmd = "ebuild %s %s" % (filename, ebuild_cmd)
    if debug:
        print "abex do_ebuild:", cmd
    os.system(cmd)

def do_xterm_emerge(args):
    use, pkg = args.split(",")
    tmp_log = os.path.expanduser("~/.abeni/tmp_log")
    cmd = '''sh -c "export USE='%s';emerge %s 2>&1| tee %s"''' \
          % (use, pkg, tmp_log)
    print "abex:", cmd
    os.system(cmd)

def do_xterm_ebuild(args):
    noauto, use, cmd, filename = args.split(",")
    tmp_log = os.path.expanduser("~/.abeni/tmp_log")
    cmd = '''sh -c "export %s;export USE='%s';ebuild %s %s 2>&1| tee %s"''' \
          % (noauto, use, filename, cmd, tmp_log)
    print "abex:", cmd
    os.system(cmd)

def rm_filesdir(args):
    """rm file in ${FILESDIR}"""
    cat, pn, filename = args.split(" ")
    olay_pkg_dir = ("%s/%s/%s/" % (PORTDIR_OVERLAY, cat, pn))

    if check_bad_dirs(olay_pkg_dir):
        return 1

    filesdir_file = "%s/files/%s" % (olay_pkg_dir, filename)
    if not os.path.exists(filesdir_file):
        return 1
    cmd = "rm %s" % filesdir_file
    print "abex:", cmd
    commands.getstatusoutput(cmd)

def rm_pkg_dir(args):
    """rm -rf olay/cat/pkgdir and olay/cat if pkgdir is empty"""
    cat, pn = args.split(" ")
    olay_pkg_dir = ("%s/%s/%s/" % (PORTDIR_OVERLAY, cat, pn))

    if check_bad_dirs(olay_pkg_dir):
        return 1
    cmd = "rm -r %s" % olay_pkg_dir
    print "abex:", cmd
    commands.getstatusoutput(cmd)

    #See if category dir is empty, if not delete it
    cat_dir = os.path.abspath("%s/.." % olay_pkg_dir)
    if not os.listdir(cat_dir):
        cmd = "rmdir %s" % cat_dir
        print "abex:", cmd
        commands.getstatusoutput(cmd)

def chmod_unpacked_dir(p):
    """chmod +g+xrw -R ${WORKDIR}/ for normal user permissions"""
    if not p:
        return 1, None
    workdir = '%s/portage/%s/work' % (PORTAGE_TMPDIR, p)

    if check_bad_dirs(workdir):
        return 1, None
    cmd = "chmod +g+rx -R %s" %  workdir
    print "abex:", cmd
    status, output = commands.getstatusoutput(cmd)
    if status:
        return (status, output)
    cmd = "chmod +g+rx %s" %  workdir
    print "abex:", cmd
    status, output = commands.getstatusoutput(cmd)
    return (status, output)

optParser = OptionParser()
optParser.add_option("-x", action="store", dest="xterm_ebuild_cmd", type="string",
                         help="xterm: ebuild <filename> <cmd>")

optParser.add_option("-m", action="store", dest="xterm_emerge", type="string",
                         help="USE='<>' emerge <pkg>")

optParser.add_option("-e", action="store", dest="ebuild_cmd", type="string",
                         help="ebuild <filename> <cmd>")

optParser.add_option("-u", action="store", dest="unpack_dir", type="string",
                         help="chmod ${WORKDIR} for non-root user")

optParser.add_option("-d", action="store", dest="cat_pkg", type="string",
                         help="rm pkgdir in overlay, and category dir if empty")

optParser.add_option("-f", action="store", dest="filesdir", type="string",
                         help="rm file in ${FILESDIR}")

if len(sys.argv) == 1:
    optParser.print_help()
    sys.exit(1)

(options, remainingArgs) = optParser.parse_args()

if options.xterm_emerge:
    do_xterm_emerge(options.xterm_emerge)
    sys.exit()

if options.xterm_ebuild_cmd:
    do_xterm_ebuild(options.xterm_ebuild_cmd)
    sys.exit()

if options.ebuild_cmd:
    do_ebuild(options.ebuild_cmd)
    sys.exit()

if options.cat_pkg:
    status = rm_pkg_dir(options.cat_pkg)
    sys.exit(status)

if options.filesdir:
    status = rm_filesdir(options.filesdir)
    sys.exit(status)

if options.unpack_dir:
    status, output = chmod_unpacked_dir(options.unpack_dir)
    sys.exit(status)

