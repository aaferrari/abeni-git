# generated by wxGlade 0.3.3 on Fri Jul 16 23:41:54 2004

"""
gui.py

 This is Abeni's gui frame class.

"""

import os
import urlparse
import shutil
import sys
import tempfile
import commands
import urlparse

import wx
import wx.stc
from wx.lib.dialogs import MultipleChoiceDialog
from portage import config, settings

import __version__ 
import utils
from Dialogs import *
from GentooSTC import GentooSTC
from FileBrowser import MyBrowser
from MyLog import MyLog
from URI_Link import MyURILink
import MyDatabase
import pyipc
import enamer


# __revision__ = "$Id: MyFrame.py,v 1.5 2005/01/22 19:59:04 robc Exp $"

env = config(clone = settings).environ()
PORTDIR_OVERLAY = env['PORTDIR_OVERLAY'].split(" ")[0]
if PORTDIR_OVERLAY[-1] == "/":
    PORTDIR_OVERLAY = PORTDIR_OVERLAY[:-1]
PORTDIR = env['PORTDIR']
PORTAGE_TMPDIR = env['PORTAGE_TMPDIR']


class MyFrame(wx.Frame):

    """Abeni's main frame"""

    def __init__(self, *args, **kwds):
        """Generated by wxglade - don't touch!"""
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_main = wx.Panel(self, -1)
        self.splitter = wx.SplitterWindow(self.panel_main, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.notebook_1 = wx.Notebook(self.splitter, -1, style=wx.NB_BOTTOM)
        self.notebook_1_pane_5 = wx.Panel(self.notebook_1, -1)
        self.notebook_s = wx.Panel(self.notebook_1, -1)
        self.notebook_filesdir = wx.Panel(self.notebook_1, -1)
        self.notebook_notes = wx.Panel(self.notebook_1, -1)
        self.panel_environment = wx.Panel(self.notebook_1, -1)
        self.splitter_2 = wx.SplitterWindow(self.splitter, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.panel_top_log = wx.Panel(self.splitter_2, -1)
        self.panel_editor = wx.Panel(self.splitter_2, -1)
        self.sizer_notes_staticbox = wx.StaticBox(self.notebook_notes, -1, "Notes")
        self.sizer_sql_staticbox = wx.StaticBox(self.notebook_notes, -1, "")
        self.panel_cpvr = wx.Panel(self.panel_main, -1)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        self.SetMenuBar(self.menubar)
        global mnuNewID; mnuNewID = wx.NewId()
        global mnuLoadOverlayID; mnuLoadOverlayID = wx.NewId()
        global mnuLoadID; mnuLoadID = wx.NewId()
        self.mnuSaveID = wx.NewId()
        self.mnuDelID = wx.NewId()
        self.mnuExportID = wx.NewId()
        self.mnuCloseID = wx.NewId()
        global mnuExitID; mnuExitID = wx.NewId()
        global mnuFindID; mnuFindID = wx.NewId()
        global mnuFindAgainID; mnuFindAgainID = wx.NewId()
        global mnuAddFuncID; mnuAddFuncID = wx.NewId()
        global mnuLicenseID; mnuLicenseID = wx.NewId()
        global mnuCleanID; mnuCleanID = wx.NewId()
        global mnuDigestID; mnuDigestID = wx.NewId()
        global mnuUnpackID; mnuUnpackID = wx.NewId()
        global mnuCompileID; mnuCompileID = wx.NewId()
        global mnuInstallID; mnuInstallID = wx.NewId()
        global mnuQmergeID; mnuQmergeID = wx.NewId()
        global mnuEbuildID; mnuEbuildID = wx.NewId()
        global mnuEmergeID; mnuEmergeID = wx.NewId()
        global mnuPatchID; mnuPatchID = wx.NewId()
        global mnuImportID; mnuImportID = wx.NewId()
        global mnuDiffID; mnuDiffID = wx.NewId()
        global mnuFileCopyID; mnuFileCopyID = wx.NewId()
        global mnuXtermSID; mnuXtermSID = wx.NewId()
        global mnuXtermDID; mnuXtermDID = wx.NewId()
        global mnuXtermCVSID; mnuXtermCVSID = wx.NewId()
        global mnuRepoConsoleID; mnuRepoConsoleID = wx.NewId()
        global mnuRepoScanID; mnuRepoScanID = wx.NewId()
        global mnuRepoFullID; mnuRepoFullID = wx.NewId()
        global mnuEditID; mnuEditID = wx.NewId()
        global mnuViewMetadataID; mnuViewMetadataID = wx.NewId()
        global mnuViewChangeLogID; mnuViewChangeLogID = wx.NewId()
        global mnuNextBufferID; mnuNextBufferID = wx.NewId()
        global mnuPrevBufferID; mnuPrevBufferID = wx.NewId()
        global mnuClearLogID; mnuClearLogID = wx.NewId()
        global mnuPrefID; mnuPrefID = wx.NewId()
        global mnuHelpID; mnuHelpID = wx.NewId()
        global mnuHelpRefID; mnuHelpRefID = wx.NewId()
        global mnuEclassID; mnuEclassID = wx.NewId()
        global mnuPrivID; mnuPrivID = wx.NewId()
        global mnuUseID; mnuUseID = wx.NewId()
        global mnulocalUseID; mnulocalUseID = wx.NewId()
        global mnuFKEYS_ID; mnuFKEYS_ID = wx.NewId()
        global mnuCVS_ID; mnuCVS_ID = wx.NewId()
        global mnuAboutID; mnuAboutID = wx.NewId()
        self.fileMenu = wx.Menu()
        self.fileMenu.Append(mnuNewID, "&New ebuild\tCtrl-n", "", wx.ITEM_NORMAL)
        self.fileMenu.Append(mnuLoadOverlayID, "L&oad ebuild from PORTDIR_OVERLAY\tCtrl-o", "", wx.ITEM_NORMAL)
        self.fileMenu.Append(mnuLoadID, "&Load ebuild from PORTDIR\tCtrl-p", "", wx.ITEM_NORMAL)
        self.fileMenu.Append(self.mnuSaveID, "&Save ebuild\tCtrl-S", "", wx.ITEM_NORMAL)
        self.fileMenu.Append(self.mnuDelID, "&Delete this ebuild", "", wx.ITEM_NORMAL)
        self.fileMenu.Append(self.mnuExportID, "&Export ebuild and aux files to tar", "", wx.ITEM_NORMAL)
        self.fileMenu.Append(self.mnuCloseID, "&Close displayed editor\tCtrl-w", "Close currently displayed editor", wx.ITEM_NORMAL)
        self.fileMenu.Append(mnuExitID, "E&xit\tAlt-X", "", wx.ITEM_NORMAL)
        self.menubar.Append(self.fileMenu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuFindID, "&Find\tCtrl-F", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuFindAgainID, "Find a&gain\tCtrl-g", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Edit")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuAddFuncID, "&Function\tF6", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuLicenseID, "&License", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Insert")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuCleanID, "&Clean\tShift-F1", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuDigestID, "&Digest\tF1", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuUnpackID, "&Unpack\tF2", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuCompileID, "C&ompile\tF3", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuInstallID, "&Install\tF4", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuQmergeID, "&Qmerge\tF5", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuEbuildID, "&ebuild <this ebuild> command\tF9", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuEmergeID, "e&merge this ebuild\tF10", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuPatchID, "Create patch from source in ${S}", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuImportID, "&Import existing patch", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuDiffID, "diff of this ebuild against PORTDIR version", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuFileCopyID, "${FILESDIR} copy/diff/edit/del\tF8", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Tools")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuXtermSID, "xterm in ${S}\tF12", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuXtermDID, "xterm in ${D}", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuXtermCVSID, "xterm in CVS dir\tShift-F12", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "xter&m")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuRepoConsoleID, "repoman console", "Full repoman CVS support", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuRepoScanID, "repoman scan", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuRepoFullID, "repoman full", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Repoman")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuEditID, "&ebuild in external editor\tF7", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuViewMetadataID, "metadata.&xml", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuViewChangeLogID, "Change&Log", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuNextBufferID, "&next buffer\tCtrl-k", "Switch editor to next buffer", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuPrevBufferID, "&previous buffer\tCtrl-j", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&View")
        self.menu_options = wx.Menu()
        self.menu_options.Append(mnuClearLogID, "&Clear log window\tF11", "", wx.ITEM_NORMAL)
        self.menubar.Append(self.menu_options, "Lo&g")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuPrefID, "&Preferences", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Options")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(mnuHelpID, "&Contents", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuHelpRefID, "Ebuild &Quick Reference", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuEclassID, "&eclasses", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuPrivID, "&Portage private functions", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuUseID, "USE variables", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnulocalUseID, "&local USE variables", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuFKEYS_ID, "List &Fkeys", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuCVS_ID, "Gentoo repoman &CVS help", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuAboutID, "&About Abeni", "", wx.ITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Help")
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT)
        self.SetToolBar(self.toolbar)
        global TB_NEW_ID; TB_NEW_ID = wx.NewId()
        global TB_OPEN_ID; TB_OPEN_ID = wx.NewId()
        global TB_OPEN_OLAY_ID; TB_OPEN_OLAY_ID = wx.NewId()
        global TB_SAVE_ID; TB_SAVE_ID = wx.NewId()
        global TB_EDIT_ID; TB_EDIT_ID = wx.NewId()
        global TB_FUNC_ID; TB_FUNC_ID = wx.NewId()
        global TB_CLEAN_ID; TB_CLEAN_ID = wx.NewId()
        global TB_DIGEST_ID; TB_DIGEST_ID = wx.NewId()
        global TB_UNPACK_ID; TB_UNPACK_ID = wx.NewId()
        global TB_COMPILE_ID; TB_COMPILE_ID = wx.NewId()
        global TB_INSTALL_ID; TB_INSTALL_ID = wx.NewId()
        global TB_QMERGE_ID; TB_QMERGE_ID = wx.NewId()
        global TB_EBUILD_ID; TB_EBUILD_ID = wx.NewId()
        global TB_EMERGE_ID; TB_EMERGE_ID = wx.NewId()
        global TB_XTERM_ID; TB_XTERM_ID = wx.NewId()
        global TB_STOP_ID; TB_STOP_ID = wx.NewId()
        self.toolbar.AddLabelTool(TB_NEW_ID, "new", wx.Bitmap("/usr/share/pixmaps/abeni/new.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "New ebuild", "")
        self.toolbar.AddLabelTool(TB_OPEN_ID, "open", wx.Bitmap("/usr/share/pixmaps/abeni/open.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open ebuild in PORTDIR", "")
        self.toolbar.AddLabelTool(TB_OPEN_OLAY_ID, "openOvl", wx.Bitmap("/usr/share/pixmaps/abeni/open_ovl.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Open ebuild in PORTDIR_OVERLAY", "")
        self.toolbar.AddLabelTool(TB_SAVE_ID, "save", wx.Bitmap("/usr/share/pixmaps/abeni/save.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save ebuild Ctrl-S", "")
        self.toolbar.AddLabelTool(TB_EDIT_ID, "edit", wx.Bitmap("/usr/share/pixmaps/abeni/edit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Edit ebuild in external editor F7", "")
        self.toolbar.AddLabelTool(TB_FUNC_ID, "newFunc", wx.Bitmap("/usr/share/pixmaps/abeni/fx.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "New Function F6", "")
        self.toolbar.AddLabelTool(TB_CLEAN_ID, "clean", wx.Bitmap("/usr/share/pixmaps/abeni/clean.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Clean Shift-F1", "")
        self.toolbar.AddLabelTool(TB_DIGEST_ID, "digest", wx.Bitmap("/usr/share/pixmaps/abeni/digest.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Digest F1", "")
        self.toolbar.AddLabelTool(TB_UNPACK_ID, "unpack", wx.Bitmap("/usr/share/pixmaps/abeni/unpack.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Unpack F2", "")
        self.toolbar.AddLabelTool(TB_COMPILE_ID, "compile", wx.Bitmap("/usr/share/pixmaps/abeni/compile.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Compile F3", "")
        self.toolbar.AddLabelTool(TB_INSTALL_ID, "install", wx.Bitmap("/usr/share/pixmaps/abeni/install.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Install F4", "")
        self.toolbar.AddLabelTool(TB_QMERGE_ID, "qmerge", wx.Bitmap("/usr/share/pixmaps/abeni/qmerge.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Qmerge F5", "")
        self.toolbar.AddLabelTool(TB_EBUILD_ID, "ebuild", wx.Bitmap("/usr/share/pixmaps/abeni/ebuild.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "ebuild <this ebuild> command F9", "")
        self.toolbar.AddLabelTool(TB_EMERGE_ID, "emerge", wx.Bitmap("/usr/share/pixmaps/abeni/emerge.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "emerge <options><this ebuild> F10", "")
        self.toolbar.AddLabelTool(TB_XTERM_ID, "xterm", wx.Bitmap("/usr/share/pixmaps/abeni/xterm.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Launch xterm in $S F12", "")
        self.toolbar.AddLabelTool(TB_STOP_ID, "stop", wx.Bitmap("/usr/share/pixmaps/abeni/stop.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Interrupt process running in log window", "")
        # Tool Bar end
        self.static_line_2 = wx.StaticLine(self, -1)
        self.button_Category = wx.Button(self.panel_cpvr, -1, "Category")
        self.text_ctrl_Category = wx.TextCtrl(self.panel_cpvr, -1, "")
        self.label_PN = wx.StaticText(self.panel_cpvr, -1, "PN")
        self.text_ctrl_PN = wx.TextCtrl(self.panel_cpvr, -1, "")
        self.label_PVR = wx.StaticText(self.panel_cpvr, -1, "PVR")
        self.text_ctrl_PVR = wx.TextCtrl(self.panel_cpvr, -1, "")
        self.button_1 = wx.ToggleButton(self.panel_cpvr, -1, "noauto")
        self.label_filename = wx.StaticText(self.panel_main, -1, "filename:")
        self.static_line_3 = wx.StaticLine(self.panel_main, -1)
        self.notebook_editor = wx.Notebook(self.panel_editor, -1, style=0)
        self.text_ctrl_log = wx.TextCtrl(self.panel_top_log, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.text_ctrl_environment = wx.TextCtrl(self.panel_environment, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.button_env_refresh = wx.Button(self.panel_environment, -1, "Refresh")
        self.radio_box_env = wx.RadioBox(self.panel_environment, -1, "View", choices=["Brief", "Full"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.button_bugzilla = wx.Button(self.notebook_notes, -1, "Bugzilla number:")
        self.text_ctrl_bugz = wx.TextCtrl(self.notebook_notes, -1, "")
        self.window_3 = MyURILink(self.notebook_notes, -1)
        self.text_ctrl_notes = wx.TextCtrl(self.notebook_notes, -1, "", style=wx.TE_MULTILINE)
        self.filesDir = MyBrowser(self.notebook_filesdir)
        self.label_filesdir = wx.StaticText(self.notebook_filesdir, -1, "${FILESDIR}:")
        self.button_filesdir_view = wx.Button(self.notebook_filesdir, -1, "View")
        self.button_filesdir_edit = wx.Button(self.notebook_filesdir, -1, "Edit")
        self.button_filesdir_new = wx.Button(self.notebook_filesdir, -1, "New File")
        self.button_filesdir_download = wx.Button(self.notebook_filesdir, -1, "Download")
        self.button_filesdir_rename = wx.Button(self.notebook_filesdir, -1, "Rename")
        self.button_filesdir_delete = wx.Button(self.notebook_filesdir, -1, "Delete")
        self.button_filesdir_refresh = wx.Button(self.notebook_filesdir, -1, "Refresh")
        self.sDir = MyBrowser(self.notebook_s)
        self.label_s_dir = wx.StaticText(self.notebook_s, -1, "${S}:")
        self.button_s_view = wx.Button(self.notebook_s, -1, "View")
        self.button_s_edit = wx.Button(self.notebook_s, -1, "Edit")
        self.button_s_delete = wx.Button(self.notebook_s, -1, "Delete")
        self.button_s_patch = wx.Button(self.notebook_s, -1, "Patch")
        self.button_s_refresh = wx.Button(self.notebook_s, -1, "Refresh")
        self.dDir = MyBrowser(self.notebook_1_pane_5)
        self.label_d_dir = wx.StaticText(self.notebook_1_pane_5, -1, "${D}:")
        self.button_d_view = wx.Button(self.notebook_1_pane_5, -1, "View")
        self.button_d_refresh = wx.Button(self.notebook_1_pane_5, -1, "Refresh")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.OnEdChanged, self.notebook_editor)
        self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.OnEdChanging, self.notebook_editor)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Abeni")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("/usr/share/pixmaps/abeni/abeni_logo16.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetMinSize((882, 860))
        self.statusbar.SetStatusWidths([-1])
        # statusbar fields
        statusbar_fields = [""]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.toolbar.Realize()
        self.button_Category.Enable(False)
        self.text_ctrl_Category.SetToolTipString("Select a category")
        self.text_ctrl_Category.Enable(False)
        self.text_ctrl_PN.SetToolTipString("Enter the Package Name")
        self.text_ctrl_PN.Enable(False)
        self.text_ctrl_PVR.SetToolTipString("Enter the Package Version")
        self.text_ctrl_PVR.Enable(False)
        self.button_1.SetValue(1)
        self.radio_box_env.SetSelection(0)
        self.text_ctrl_bugz.Enable(False)
        self.text_ctrl_notes.Enable(False)
        self.button_filesdir_view.Enable(False)
        self.button_filesdir_edit.Enable(False)
        self.button_filesdir_new.Enable(False)
        self.button_filesdir_download.Enable(False)
        self.button_filesdir_rename.Enable(False)
        self.button_filesdir_delete.Enable(False)
        self.button_filesdir_refresh.Enable(False)
        self.button_s_view.Enable(False)
        self.button_s_edit.Enable(False)
        self.button_s_delete.Enable(False)
        self.button_s_patch.Enable(False)
        self.button_s_refresh.Enable(False)
        self.button_d_view.Enable(False)
        self.button_d_refresh.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_cpvr_notebook = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_s = wx.BoxSizer(wx.VERTICAL)
        sizer_s_buttons = wx.BoxSizer(wx.HORIZONTAL)
        sizer_filesdir = wx.BoxSizer(wx.VERTICAL)
        sizer_filesdir_buttons = wx.BoxSizer(wx.HORIZONTAL)
        sizer_sql = wx.StaticBoxSizer(self.sizer_sql_staticbox, wx.VERTICAL)
        sizer_notes = wx.StaticBoxSizer(self.sizer_notes_staticbox, wx.HORIZONTAL)
        sizer_homepage = wx.BoxSizer(wx.HORIZONTAL)
        sizer_bugzilla = wx.BoxSizer(wx.HORIZONTAL)
        sizer_environment = wx.BoxSizer(wx.VERTICAL)
        sizer_environment_ctrls = wx.BoxSizer(wx.HORIZONTAL)
        sizer_top_log = wx.BoxSizer(wx.HORIZONTAL)
        sizer_editor = wx.BoxSizer(wx.HORIZONTAL)
        sizer_cpvr = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_main.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_8.Add(self.button_Category, 0, wx.RIGHT, 10)
        sizer_8.Add(self.text_ctrl_Category, 1, wx.RIGHT|wx.EXPAND, 16)
        sizer_6.Add(self.label_PN, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_6.Add(self.text_ctrl_PN, 1, wx.RIGHT|wx.EXPAND, 16)
        sizer_8.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_7.Add(self.label_PVR, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_7.Add(self.text_ctrl_PVR, 0, 0, 0)
        sizer_8.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_8.Add(self.button_1, 0, 0, 0)
        sizer_cpvr.Add(sizer_8, 1, wx.TOP|wx.BOTTOM|wx.EXPAND, 2)
        self.panel_cpvr.SetAutoLayout(True)
        self.panel_cpvr.SetSizer(sizer_cpvr)
        sizer_cpvr.Fit(self.panel_cpvr)
        sizer_cpvr.SetSizeHints(self.panel_cpvr)
        sizer_cpvr_notebook.Add(self.panel_cpvr, 0, wx.EXPAND, 0)
        sizer_cpvr_notebook.Add(self.label_filename, 0, wx.LEFT|wx.ADJUST_MINSIZE, 4)
        sizer_cpvr_notebook.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizer_editor.Add(self.notebook_editor, 1, wx.EXPAND, 0)
        self.panel_editor.SetAutoLayout(True)
        self.panel_editor.SetSizer(sizer_editor)
        sizer_editor.Fit(self.panel_editor)
        sizer_editor.SetSizeHints(self.panel_editor)
        sizer_top_log.Add(self.text_ctrl_log, 1, wx.EXPAND, 0)
        self.panel_top_log.SetAutoLayout(True)
        self.panel_top_log.SetSizer(sizer_top_log)
        sizer_top_log.Fit(self.panel_top_log)
        sizer_top_log.SetSizeHints(self.panel_top_log)
        self.splitter_2.SplitHorizontally(self.panel_editor, self.panel_top_log)
        sizer_environment.Add(self.text_ctrl_environment, 1, wx.EXPAND, 0)
        sizer_environment_ctrls.Add(self.button_env_refresh, 0, wx.ALL, 10)
        sizer_environment_ctrls.Add(self.radio_box_env, 0, wx.BOTTOM, 12)
        sizer_environment.Add(sizer_environment_ctrls, 0, wx.EXPAND, 0)
        self.panel_environment.SetAutoLayout(True)
        self.panel_environment.SetSizer(sizer_environment)
        sizer_environment.Fit(self.panel_environment)
        sizer_environment.SetSizeHints(self.panel_environment)
        sizer_bugzilla.Add(self.button_bugzilla, 0, wx.ALL, 2)
        sizer_bugzilla.Add(self.text_ctrl_bugz, 0, wx.ALL, 2)
        sizer_sql.Add(sizer_bugzilla, 0, wx.EXPAND, 0)
        sizer_homepage.Add(self.window_3, 1, wx.TOP|wx.BOTTOM|wx.EXPAND, 4)
        sizer_sql.Add(sizer_homepage, 1, wx.EXPAND, 0)
        sizer_notes.Add(self.text_ctrl_notes, 1, wx.EXPAND, 0)
        sizer_sql.Add(sizer_notes, 1, wx.EXPAND, 0)
        self.notebook_notes.SetAutoLayout(True)
        self.notebook_notes.SetSizer(sizer_sql)
        sizer_sql.Fit(self.notebook_notes)
        sizer_sql.SetSizeHints(self.notebook_notes)
        sizer_filesdir.Add(self.filesDir, 1, wx.EXPAND, 0)
        sizer_filesdir.Add(self.label_filesdir, 0, wx.LEFT|wx.EXPAND, 2)
        sizer_filesdir_buttons.Add(self.button_filesdir_view, 0, wx.ALL, 10)
        sizer_filesdir_buttons.Add(self.button_filesdir_edit, 0, wx.ALL, 10)
        sizer_filesdir_buttons.Add(self.button_filesdir_new, 0, wx.ALL, 10)
        sizer_filesdir_buttons.Add(self.button_filesdir_download, 0, wx.ALL, 10)
        sizer_filesdir_buttons.Add(self.button_filesdir_rename, 0, wx.ALL, 10)
        sizer_filesdir_buttons.Add(self.button_filesdir_delete, 0, wx.ALL, 10)
        sizer_filesdir_buttons.Add(self.button_filesdir_refresh, 0, wx.ALL, 10)
        sizer_filesdir.Add(sizer_filesdir_buttons, 0, wx.EXPAND, 0)
        self.notebook_filesdir.SetAutoLayout(True)
        self.notebook_filesdir.SetSizer(sizer_filesdir)
        sizer_filesdir.Fit(self.notebook_filesdir)
        sizer_filesdir.SetSizeHints(self.notebook_filesdir)
        sizer_s.Add(self.sDir, 1, wx.EXPAND, 0)
        sizer_s.Add(self.label_s_dir, 0, wx.LEFT|wx.EXPAND, 2)
        sizer_s_buttons.Add(self.button_s_view, 0, wx.ALL, 10)
        sizer_s_buttons.Add(self.button_s_edit, 0, wx.ALL, 10)
        sizer_s_buttons.Add(self.button_s_delete, 0, wx.ALL, 10)
        sizer_s_buttons.Add(self.button_s_patch, 0, wx.ALL, 10)
        sizer_s_buttons.Add(self.button_s_refresh, 0, wx.ALL, 10)
        sizer_s.Add(sizer_s_buttons, 0, wx.EXPAND, 0)
        self.notebook_s.SetAutoLayout(True)
        self.notebook_s.SetSizer(sizer_s)
        sizer_s.Fit(self.notebook_s)
        sizer_s.SetSizeHints(self.notebook_s)
        sizer_1.Add(self.dDir, 1, wx.EXPAND, 0)
        sizer_1.Add(self.label_d_dir, 0, wx.LEFT|wx.EXPAND, 2)
        sizer_2.Add(self.button_d_view, 0, wx.ALL, 10)
        sizer_2.Add(self.button_d_refresh, 0, wx.ALL, 10)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        self.notebook_1_pane_5.SetAutoLayout(True)
        self.notebook_1_pane_5.SetSizer(sizer_1)
        sizer_1.Fit(self.notebook_1_pane_5)
        sizer_1.SetSizeHints(self.notebook_1_pane_5)
        self.notebook_1.AddPage(self.panel_environment, "Environment")
        self.notebook_1.AddPage(self.notebook_notes, "Notes")
        self.notebook_1.AddPage(self.notebook_filesdir, "${FILESDIR}")
        self.notebook_1.AddPage(self.notebook_s, "${S}")
        self.notebook_1.AddPage(self.notebook_1_pane_5, "${D}")
        self.splitter.SplitHorizontally(self.splitter_2, self.notebook_1)
        sizer_cpvr_notebook.Add(self.splitter, 1, wx.EXPAND, 0)
        self.panel_main.SetAutoLayout(True)
        self.panel_main.SetSizer(sizer_cpvr_notebook)
        sizer_cpvr_notebook.Fit(self.panel_main)
        sizer_cpvr_notebook.SetSizeHints(self.panel_main)
        sizer_main.Add(self.panel_main, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_main)
        self.Layout()
        self.Centre()
        # end wxGlade
        self.__my_layout()

    def __my_layout(self):
        """Local changes to __do_layout()"""
        if os.getuid() == 0:
            utils.my_message(self,
                             "You no longer need run Abeni as root.\n" + \
                             "Setup your regular user to use sudo.\n" + \
                             "See http://abeni.sf.net/ if you need\n" + \
                             "help setting up sudo.",
                             "You must NOT be root.",
                             "error"
                             )
            sys.exit(1)
        if commands.getoutput("sudo whoami").find("root") == -1:
            utils.my_message(self, "You do not appear to have sudo\n" + \
                             "setup correctly for Abeni.\n" + \
                             "See http://abeni.sf.net/ if you need\n" + \
                             "help setting up sudo.",
                             "sudo test failed",
                             "error"
                             )
            sys.exit(1)

        wx.EVT_BUTTON(self, self.button_bugzilla.GetId(), self.OnLaunchBugz) 
        wx.EVT_BUTTON(self, self.button_env_refresh.GetId(),
                      self.OnViewEnvironment)
        wx.EVT_BUTTON(self, self.button_Category.GetId(), self.OnCatButton)
        #FILESDIR browser
        wx.EVT_BUTTON(self, self.button_filesdir_download.GetId(),
                      self.OnFilesdirDownload)
        wx.EVT_BUTTON(self, self.button_filesdir_new.GetId(),
                      self.OnFilesdirNew)
        wx.EVT_BUTTON(self, self.button_filesdir_rename.GetId(),
                      self.OnFilesdirRename)
        wx.EVT_BUTTON(self, self.button_filesdir_delete.GetId(),
                      self.OnFilesdirDelete)
        wx.EVT_BUTTON(self, self.button_filesdir_view.GetId(),
                      self.OnFilesdirView)
        wx.EVT_BUTTON(self, self.button_filesdir_edit.GetId(),
                      self.OnFilesdirEdit)
        wx.EVT_BUTTON(self, self.button_filesdir_refresh.GetId(),
                      self.OnFilesdirRefresh)
        #${S} browser:
        wx.EVT_BUTTON(self, self.button_s_refresh.GetId(), self.OnSRefresh)
        wx.EVT_BUTTON(self, self.button_s_view.GetId(), self.OnSView)
        wx.EVT_BUTTON(self, self.button_s_edit.GetId(), self.OnSEdit)
        #wx.EVT_BUTTON(self, self.button_s_patch.GetId(), self.OnSEdit)
        wx.EVT_BUTTON(self, self.button_s_patch.GetId(), self.OnPatchButton)

        #${D} browser:
        wx.EVT_BUTTON(self, self.button_d_refresh.GetId(), self.OnDRefresh)
        wx.EVT_BUTTON(self, self.button_d_view.GetId(),
                      self.OnDView)

        wx.EVT_TOOL(self, TB_NEW_ID, self.OnMnuNew)
        wx.EVT_TOOL(self, TB_OPEN_ID, self.OnMnuLoad)
        wx.EVT_TOOL(self, TB_OPEN_OLAY_ID, self.OnMnuLoadFromOverlay)
        wx.EVT_TOOL(self, TB_SAVE_ID, self.OnMnuSave)
        wx.EVT_TOOL(self, TB_EDIT_ID, self.OnMnuEdit)

        #Insert
        wx.EVT_TOOL(self, mnuLicenseID, self.OnInsertLicense)
        wx.EVT_TOOL(self, TB_FUNC_ID, self.OnMnuNewFunction)
        wx.EVT_TOOL(self, mnuAddFuncID, self.OnMnuNewFunction)
        #Tool

        wx.EVT_TOOL(self, TB_CLEAN_ID, self.OnMnuClean)
        wx.EVT_TOOL(self, TB_DIGEST_ID, self.OnMnuCreateDigest)
        wx.EVT_TOOL(self, TB_UNPACK_ID, self.OnToolbarUnpack)
        wx.EVT_TOOL(self, TB_COMPILE_ID, self.OnToolbarCompile)
        wx.EVT_TOOL(self, TB_INSTALL_ID, self.OnToolbarInstall)
        wx.EVT_TOOL(self, TB_QMERGE_ID, self.OnToolbarQmerge)
        wx.EVT_TOOL(self, TB_EBUILD_ID, self.OnMnuEbuild)
        wx.EVT_TOOL(self, TB_EMERGE_ID, self.OnMnuEmerge)
        wx.EVT_TOOL(self, TB_XTERM_ID, self.OnXtermInS)
        wx.EVT_TOOL(self, TB_STOP_ID, self.KillProc)

        # File

        wx.EVT_MENU_RANGE(self, wx.ID_FILE1, wx.ID_FILE9, self.OnFileHistory)
        wx.EVT_MENU(self, mnuNewID, self.OnMnuNew)
        wx.EVT_MENU(self, mnuLoadID, self.OnMnuLoad)
        wx.EVT_MENU(self, mnuLoadOverlayID, self.OnMnuLoadFromOverlay)
        wx.EVT_MENU(self, self.mnuSaveID, self.OnMnuSave)
        wx.EVT_MENU(self, self.mnuDelID, self.OnMnuDeleteEbuild)
        wx.EVT_MENU(self, self.mnuExportID, self.OnMnuExportEbuild)
        wx.EVT_MENU(self, self.mnuCloseID, self.OnCloseBuffer)
        wx.EVT_MENU(self, mnuExitID, self.OnMnuExit)
        wx.EVT_MENU(self, mnuFindID, self.OnHelpFind)
        wx.EVT_MENU(self, mnuFindAgainID, self.OnFindNext)
        wx.EVT_COMMAND_FIND(self, -1, self.OnFind)
        wx.EVT_COMMAND_FIND_NEXT(self, -1, self.OnFind)
        wx.EVT_COMMAND_FIND_CLOSE(self, -1, self.OnFindClose)

        #Tools:

        wx.EVT_MENU(self, mnuCleanID, self.OnMnuClean)
        wx.EVT_MENU(self, mnuDigestID, self.OnMnuCreateDigest)
        wx.EVT_MENU(self, mnuUnpackID, self.OnToolbarUnpack)
        wx.EVT_MENU(self, mnuCompileID, self.OnToolbarCompile)
        wx.EVT_MENU(self, mnuInstallID, self.OnToolbarInstall)
        wx.EVT_MENU(self, mnuEbuildID, self.OnMnuEbuild)
        wx.EVT_MENU(self, mnuQmergeID, self.OnToolbarQmerge)
        wx.EVT_MENU(self, mnuEmergeID, self.OnMnuEmerge)
        wx.EVT_MENU(self, mnuPatchID, self.OnMnuMakePatch)
        wx.EVT_MENU(self, mnuImportID, self.OnMnuImportPatch)
        wx.EVT_MENU(self, mnuDiffID, self.OnMnuDiff)
        wx.EVT_MENU(self, mnuFileCopyID, self.OnMnuFileCopy)
        #xterms
        wx.EVT_MENU(self, mnuXtermSID, self.OnXtermInS)
        wx.EVT_MENU(self, mnuXtermDID, self.OnXtermInD)
        wx.EVT_MENU(self, mnuXtermCVSID, self.OnXtermInCVS)
        wx.EVT_MENU(self, mnuViewMetadataID, self.OnMnuViewMetadata)
        wx.EVT_MENU(self, mnuViewChangeLogID, self.OnMnuViewChangeLog)
        wx.EVT_MENU(self, mnuEditID, self.OnMnuEdit)

        #repoman:
        wx.EVT_MENU(self, mnuRepoConsoleID, self.OnMnuRepomanConsole)
        wx.EVT_MENU(self, mnuRepoFullID, self.OnMnuRepomanFull)
        wx.EVT_MENU(self, mnuRepoScanID, self.OnMnuRepomanScan)

        # Log:
        wx.EVT_MENU(self, mnuClearLogID, self.OnMnuClearLog)

        # Options:
        wx.EVT_MENU(self, mnuPrefID, self.OnMnuPref)

        # Help:
        wx.EVT_MENU(self, mnuHelpID, self.OnMnuHelp)
        wx.EVT_MENU(self, mnuHelpRefID, self.OnMnuHelpRef)
        wx.EVT_MENU(self, mnuEclassID, self.OnMnuEclassHelp)
        wx.EVT_MENU(self, mnuPrivID, self.OnMnuPrivHelp)
        wx.EVT_MENU(self, mnuUseID, self.OnMnuUseHelp)
        wx.EVT_MENU(self, mnulocalUseID, self.OnMnuLocalUseHelp)
        wx.EVT_MENU(self, mnuFKEYS_ID, self.OnMnuHelpFkeys)
        wx.EVT_MENU(self, mnuCVS_ID, self.OnMnuHelpCVS)
        wx.EVT_MENU(self, mnuAboutID, self.OnMnuAbout)

        #view
        wx.EVT_MENU(self, mnuNextBufferID, self.OnNextBuffer)
        wx.EVT_MENU(self, mnuPrevBufferID, self.OnPreviousBuffer)

        wx.EVT_RADIOBOX(self, self.radio_box_env.GetId(), self.OnEnvRadioBox)

        self.Bind(wx.EVT_TOGGLEBUTTON, self.OnNoauto, self.button_1)
        self.toolbar.EnableTool(TB_STOP_ID, False)

        wx.EVT_CLOSE(self, self.OnClose)
        wx.EVT_END_PROCESS(self, -1, self.OnProcessEnded)
        self.noauto = "FEATURES='noauto'"
        self.database = None
        self.process = None

        #TODO: Add option to save current screen size when exiting
        self.SetSize((882, 696))
        #screenWidth =  wx.SystemSettings.GetMetric(wx.SYS_SCREEN_X)
        #screenHeight = wx.SystemSettings.GetMetric(wx.SYS_SCREEN_Y)
        #print screenHeight, screenWidth
        #Prevent splitter windows from becoming un-split
        self.splitter.SetMinimumPaneSize(20)
        self.splitter_2.SetMinimumPaneSize(20)

        #Load recently accessed ebuilds
        abeni_dir = os.path.expanduser('~/.abeni')
        bookmarks = '%s/recent.txt' % abeni_dir
        if os.path.exists(bookmarks):
            self.recentList = open(bookmarks, 'r').readlines()
        else:
            self.recentList = []
        self.filehistory = wx.FileHistory(9)
        self.filehistory.UseMenu(self.fileMenu)
        #self.recentList.sort()
        for ebuild in self.recentList:
            e = ebuild.strip()
            if os.path.exists(e):
                self.filehistory.AddFileToHistory(e) 

        #set to 1 to also send to stdout, not just log window
        self.stdout = 0
        #brief mode for viewing environment:
        self.env_view = 0
        # Get options from ~/.abeni/abenirc file
        utils.get_options(self)
        if self.pref['logfile'] == 1:
            self.logfile = open(self.pref['logFilename'], 'a')
        else:
            self.logfile = None

        # ${S}
        self.s = ''
        # Tells if an external command is running, like emerge, ebuild etc.
        self.running = None
        # Action performed during external commands
        self.action = None
        #pre notebook
        #self.ThisEd().Hide()
        # get the current size
        points = self.text_ctrl_log.GetFont().GetPointSize()
        f = wx.Font(points, wx.MODERN, wx.NORMAL, True)
        self.text_ctrl_log.SetDefaultStyle(wx.TextAttr("BLACK",
                                                       wx.NullColour, f)
                                           )
        self.SetLog()
        if not self.pref['editor']:
            self.Write("!!! Set your external editor under the Options menu")
            self.Write(" *  For gvim, use '/usr/bin/gvim -f'")
        #wx.EVT_MENU_RANGE(self, wx.ID_FILE1, wx.ID_FILE9, self.OnFileHistory)

        self.SetTitle("Abeni - The ebuild Builder " + __version__.version)
        self.FindReplaceData = wx.FindReplaceData()
        #self.ExternalControlListen()
        #pre notebook
        #self.ApplyPrefs()
        if self.pref['db'] == 0:
            self.db = None
        else: 
            self.db = MyDatabase
        #CVS:
        #self.menubar.Enable(self.mnuFullCommitID, False)
        #Load ebuild if specified on command line, by filename or by
        ## full package name
        #if len(sys.argv) == 2:
        #    f = sys.argv[1]
        #    print "Checking for package: %s" % f
        #    #Draw GUI before we start the slow search
        #    utils.load_by_package(self, f)
        self.EnableToolbar(False)

        #Restore frame and splitters to last size/positions:
        if self.pref.has_key('splitterPosition'):
            self.splitter.SetSashPosition(int(self.pref['splitterPosition']),
                                          True
                                          )
        if self.pref.has_key('splitter2Position'):
            self.splitter_2.SetSashPosition(int(self.pref['splitter2Position']),
                                            True
                                            )
        if self.pref.has_key('frameSize'):
            x, y = self.pref['frameSize'].split(" ")
            self.SetSize((int(x), int(y)))
        #Focus on Notes tab
        self.notebook_1.SetSelection(1)

        #list of editor widgets:
        self.eds = []
        self.ed_panels = []
        self.ed_shown = 0
        # Ebuild's full path
        self.filename = []
        self.loading_ebuild = None
        self.DisableMenus()
        # end wxGlade

    def EnableMenus(self):
        """Enable appropriate menus when first editor is opened"""
        # 'edit' through 'view' top menus:
        self.menubar.EnableTop(1, True)
        self.menubar.EnableTop(2, True)
        self.menubar.EnableTop(3, True)
        self.menubar.EnableTop(4, True)
        self.menubar.EnableTop(5, True)
        self.menubar.EnableTop(6, True)
        self.fileMenu.Enable(self.mnuSaveID, True)
        self.fileMenu.Enable(self.mnuDelID, True)
        self.fileMenu.Enable(self.mnuExportID, True)
        self.fileMenu.Enable(self.mnuCloseID, True)

    def DisableMenus(self):
        """Disable appropriate menus when no editors open"""
        # 'edit' through 'view' top menus:
        self.menubar.EnableTop(1, False)
        self.menubar.EnableTop(2, False)
        self.menubar.EnableTop(3, False)
        self.menubar.EnableTop(4, False)
        self.menubar.EnableTop(5, False)
        self.menubar.EnableTop(6, False)
        self.fileMenu.Enable(self.mnuSaveID, False)
        self.fileMenu.Enable(self.mnuDelID, False)
        self.fileMenu.Enable(self.mnuExportID, False)
        self.fileMenu.Enable(self.mnuCloseID, False)

    def QueryEditing(self):
        """Return number of open editors"""
        return len(self.eds)

    def AddEditor(self, filename, tabname):
        """Add notebook page with editor"""
        this_page = len(self.eds)

        self.ed_panels.append(wx.Panel(self.notebook_editor, -1))

        self.eds.append(GentooSTC(self.ed_panels[this_page], self, self.toolbar, TB_SAVE_ID))

        sizer_staticbox = (wx.StaticBox(self.ed_panels[this_page], -1))
        my_sizer = wx.StaticBoxSizer(sizer_staticbox, wx.HORIZONTAL)
        #my_sizer = wx.StaticBoxSizer(self.ed_panels[this_page], wx.HORIZONTAL)
        self.filename.append(filename)
        my_sizer.Add(self.eds[this_page], 1, wx.EXPAND, 0)
        self.ed_panels[this_page].SetSizer(my_sizer)
        my_sizer.Fit(self.ed_panels[this_page])
        my_sizer.SetSizeHints(self.ed_panels[this_page])
        self.notebook_editor.AddPage(self.ed_panels[this_page], tabname)
        self.notebook_editor.SetSelection(this_page)
        self.label_filename.SetLabel(filename)
        self.ed_shown = this_page

    def SetLog(self):
        """Set active log"""
        wx.Log_SetActiveTarget(MyLog(self.text_ctrl_log))

    def Write(self, txt):
        """Send text to log window"""
        if self.stdout:
            print txt
        self.WriteText(txt)

    def WriteText(self, text):
        """Send text to log window after colorizing"""
        #TODO: No idea why this is output at the end of every ExecuteInLog:
        #if text.find("md5 src_uri") == 4:
        #    if self.action != 'unpack':
        #        return

        if self.pref['logfile'] == 1:
            self.logfile.write(text + "\n")

        if text[-1:] == '\n':
            text = text[:-1]
        #Remove color and other esc codes
        text = text.replace('\b', '')
        text = text.replace("\x1b[0m" , '')
        # For the [ok]'s
        text = text.replace("\x1b[A", '')
        text = text.replace("\x1b[-7G", '')
        text = text.replace("\x1b[73G", '')

        pref = text[0:3]
        if pref == ">>>" or pref == "<<<" or pref == "---" \
             or pref == ")))" or  pref == " * ":
            self.LogColor("BLUE")
            wx.LogMessage(text)
            self.LogColor("BLACK")
        elif pref == "!!!":
            self.LogColor("RED")
            wx.LogMessage(text)
            self.LogColor("BLACK")
        else:
            wx.LogMessage(text)

    def LogColor(self, color):
        """Set color of text sent to log window"""
        self.text_ctrl_log.SetDefaultStyle(wx.TextAttr(wx.NamedColour(color)))

    def ExecuteInLog(self, cmd, log_msg=''):
        """Run program asynchronously sending stdout & stderr to log window"""
        # If you want to do something after async job finishes, set 
        # self.action = "foo" See: utils.py PostAction
        if self.running:
            msg = ("Please wait till this finishes:\n %s" % self.running)
            title = "Abeni: Error - Wait till external program is finished."
            utils.my_message(self, msg, title, "error")
            return
        if log_msg:
            self.Write(log_msg)
        self.running = cmd
        self.toolbar.EnableTool(TB_STOP_ID, True)
        self.process = wx.Process(self)
        self.process.Redirect();
        module_path = "/usr/lib/python%s/site-packages/abeni" % sys.version[0:3]
        py_cmd = "python -u %s/doCmd.py %s" % (module_path, cmd)
        self.pid = wx.Execute(py_cmd, wx.EXEC_ASYNC, self.process)
        #Start timer to keep GUI updated:
        ID_Timer = wx.NewId()
        self.timer = wx.Timer(self, ID_Timer)
        wx.EVT_TIMER(self,  ID_Timer, self.HandleIdle)
        self.timer.Start(100)

    def EnableToolbar(self, state):
        """Disable icons not applicable when ebuild not saved"""
        ids = [TB_SAVE_ID, TB_EDIT_ID, TB_FUNC_ID, TB_CLEAN_ID, TB_DIGEST_ID,
               TB_UNPACK_ID, TB_COMPILE_ID, TB_INSTALL_ID, TB_QMERGE_ID,
               TB_EBUILD_ID, TB_EMERGE_ID, TB_XTERM_ID
               ]
        for my_id in ids:
            self.toolbar.EnableTool(my_id, state)

    def EnableSaveToolbar(self, state):
        """Enable save ebuild icon on toolbar"""
        self.toolbar.EnableTool(TB_SAVE_ID, state)

    def OnNoauto(self, event):
        """Toggle noauto button"""
        if self.noauto:
            self.noauto = "FEATURES='-noauto'"
        else:
            self.noauto = "FEATURES='noauto'"

    def OnMnuExportEbuild(self, event):
        """Export ebuild and auxiliary files as tarball"""
        utils.export_ebuild(self)

    def OnInsertLicense(self, evt):
        """Choose license(s) overwrite any existing license(s)"""
        c = os.listdir('%s/licenses' % PORTDIR)
        def strp(s):
            return s.strip()
        c = map(strp, c)
        c = filter(None, c)
        c.sort()
        dlg = MultipleChoiceDialog(self,
                                   "Choose one or more:\n" + \
                                   "(This replaces any existing)",
                                   "License", c)
        if dlg.ShowModal() == wx.ID_OK:
            opt = dlg.GetValueString()
            l = ""
            if len(opt) == 1:
                l = '%s' % opt[0].strip()
                self.FindReplace("LICENSE", 'LICENSE="%s"' % l.strip())
            else:
                for s in opt:
                    l = ('%s | %s' % (l, s.strip()))
                    self.FindReplace("LICENSE", 'LICENSE="%s"' % l[2:].strip())

    def OnHelpFind(self, event):
        """Display find/replace dialog for editor"""
        self.finddlg = wx.FindReplaceDialog(self, self.FindReplaceData, "Find")
        self.finddlg.Show(True)

    def OnFind(self, event):
        """Find text in editor"""
        end = self.ThisEd().GetLength()
        textstring = self.ThisEd().GetTextRange(0, end).lower()
        start = self.ThisEd().GetSelection()[1]
        findstring = self.FindReplaceData.GetFindString().lower()
        loc = textstring.find(findstring, start)
        if loc == -1 and start != 0:
            # string not found, start at beginning
            start = 0
            loc = textstring.find(findstring, start)
        if loc == -1:
            dlg = wx.MessageDialog(self, 'Find String Not Found',
                          'String Not Found',
                          wx.OK | wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
        if self.finddlg:
            if loc == -1:
                self.finddlg.SetFocus()
                return
            else:
                self.finddlg.Destroy()
        self.ThisEd().GotoPos(loc)
        self.ThisEd().SetSelection(loc, loc + len(findstring))

    def OnFindNext(self, event):
        """Find previous text in editor"""
        if self.FindReplaceData.GetFindString():
            self.OnFind(event)
        else:
            self.OnHelpFind(event)

    def OnFindClose(self, event):
        """Close find/replace dialog"""
        event.GetDialog().Destroy()

    def OnEnvRadioBox(self, event):
        """set either full or brief mode for enviornment tab"""
        self.env_view = event.GetInt()

    def OnMnuNewFunction(self, event):
        """Dialog to add new function"""
        dlg = AddFunctionDialog.AddFunction(self)
        dlg.CenterOnScreen()
        v = dlg.ShowModal()
        if v == wx.ID_OK:
            #TODO: func var not used?
            func, val = dlg.GetFunc()
            self.ThisEd().AddText(val)
        #self.ThisEd().SetCursor(wx.stc.STC_CURSORNORMAL)
        dlg.Destroy()

    def OnPatchButton(self, evt):
        """patch file in ${S}, copy patch to ${FILESDIR}"""
        f = self.sDir.getFilename()
        if not os.path.isfile(f):
            return
        self.CreatePatch([f])

    def OnDView(self, evt):
        """View selected file in explorer"""
        utils.scroll_text_dlg(self, self.dDir.getFilename(),
                              self.dDir.getFilename())
    
    def OnSView(self, evt):
        """View selected file in explorer"""
        utils.scroll_text_dlg(self, self.sDir.getFilename(),
                              self.sDir.getFilename())
    
    def OnFilesdirView(self, evt):
        """View selected file in explorer"""
        utils.scroll_text_dlg(self, self.filesDir.getFilename(),
                              self.filesDir.getFilename())
    
    def OnSEdit(self, evt):
        """Edit selected file in external editor"""
        f = self.sDir.getFilename()
        if not os.path.isfile(f):
            return
        self.EditFile(f)

    def OnFilesdirEdit(self, evt):
        """Edit selected file in external editor"""
        f = self.filesDir.getFilename()
        if not os.path.isfile(f):
            return
        self.EditFile(f)

    def OnFilesdirRename(self, evt):
        """Rename selected file in ${FILESDIR}"""
        f = self.filesDir.getFilename()

        if not os.path.isfile(f):
            return

        dlg = wx.TextEntryDialog(self, 'Enter new name:', 'Enter new name:', f)
        if dlg.ShowModal() == wx.ID_OK:
            new_name = dlg.GetValue()
        else:
            return
        try:
            os.rename(f, new_name)
        except OSError, msg:
            print "!!! Error: %s" % msg
        
        self.filesDir.onRefresh(-1)

    def OnFilesdirRefresh(self, event):
        """Update ${FILESDIR} file explorer"""
        try:
            self.filesDir.onRefresh(-1)
        except TypeError:
            return

    def OnSRefresh(self, event):
        """Update ${S} file explorer"""
        try:
            self.sDir.onRefresh(-1)
        except TypeError:
            return

    def OnDRefresh(self, event):
        """Update ${D} file explorer"""
        try:
            self.dDir.onRefresh(-1)
        except TypeError:
            return

    def OnFilesdirDownload(self, event):
        """Download file with wget to ${FILESDIR}"""
        dlg = wx.TextEntryDialog(self, 'Enter URI:', 'Enter URI:', '')
        if dlg.ShowModal() == wx.ID_OK:
            uri = dlg.GetValue()
        else:
            return

        f = os.path.basename(urlparse.urlsplit(uri)[2])
        outFile = os.path.join(utils.get_files_dir(self), f)

        #Offer to rename bugs.gentoo.org bugzilla attachments:
        #TODO: Nifty feature would be to parse the html automagically:
        #See previous bugzilla tools in abeni's cvs to do this
        #
        if f == "attachment.cgi":
            dlg = wx.TextEntryDialog(self, 'Choose name for your file:',
                                    'Enter name for new file', f)
            if dlg.ShowModal() == wx.ID_OK:
                f = dlg.GetValue()
                outFile = os.path.join(utils.get_files_dir(self), f)
         
        #If file exists, add  _1, _2 etc. suffix:
        if os.path.exists(outFile):
            i = 1
            newOutFile = ("%s_%s" % (outFile, i))
            while os.path.exists(newOutFile):
                i += 1
            outFile = newOutFile

        cmd = "wget -O %s %s" % (outFile, uri)
        self.action = "download"
        self.ExecuteInLog(cmd, "Fetching " + f)

    def OnFilesdirNew(self, evt):
        """Create new file in ${FILESDIR}"""
        dlg = wx.TextEntryDialog(self, 'Choose name for your file:',
                            'Enter name for new file', '')
        if dlg.ShowModal() == wx.ID_OK:
            fname = dlg.GetValue()
        else:
            return

        d = utils.get_files_dir(self)
        p = os.path.join(d, fname)

        if os.path.exists(p):
            utils.my_message(self, "File exists!", \
                          "Error", "error")
            return
         
        os.system("touch %s" % p)
        self.filesDir.onRefresh(-1)

    def OnFilesdirDelete(self, evt):
        """delete selected file in explorer"""
        f = self.filesDir.getFilename()
        if not os.path.isfile(f):
            return
        dlg = wx.MessageDialog(self, 'DELETE this file?\n' + f,
                'DELETE file?', wx.YES_NO | wx.ICON_WARNING)
        val = dlg.ShowModal()
        if val == wx.ID_YES:
            if os.path.basename(f)[:6] == "digest":
                utils.do_sudo("rm %s" % f)
            else:
                try:
                    os.unlink(f)
                except:
                    utils.my_message(self, "Couldn't delete file.", \
                          "Error", "error")
            self.filesDir.onRefresh(-1)

    def OnCatButton(self, event):
        """Choose ebuild category"""
        c = utils.get_categories()
        dlg = wx.SingleChoiceDialog(self, 'Category', 'Category:',
                                   c, wx.OK|wx.CANCEL)
        if dlg.ShowModal() == wx.ID_OK:
            opt = dlg.GetStringSelection()
            #Mark all games stable: Bugzilla #25708
            self.text_ctrl_Category.SetValue(opt)
            #TODO: games can be marked stable

    def HandleIdle(self, event):
        """Keep GUI fresh while executing async commands"""
        if self.process is not None:
            stream = self.process.GetInputStream()
            if stream.CanRead():
                t = stream.readline()
                self.Write(t)
            stream = self.process.GetErrorStream()
            if stream.CanRead():
                t = stream.readline()
                self.Write(t)

    def OnFileHistory(self, event):
        """Load ebuild on FileHistory event"""
        # get the file based on the menu ID
        file_num = event.GetId() - wx.ID_FILE1
        path = self.filehistory.GetHistoryFile(file_num)
        utils.reset(self)
        utils.load_ebuild(self, path)
        # add it back to the history so it will be moved up the list
        self.filehistory.AddFileToHistory(path)

    def OnMnuLoad(self, event):
        """Load ebuild file from PORTDIR"""
        open_dir = PORTDIR
        if hasattr(self, 'last_open'):
            open_dir = self.last_open
        else:
            open_dir = PORTDIR

        if not utils.verify_saved(self):
            wildcard = "ebuild files (*.ebuild)|*.ebuild"
            dlg = wx.FileDialog(self, "Choose a file", open_dir, "", \
                                wildcard, wx.OPEN)
            if dlg.ShowModal() == wx.ID_OK:
                filename = dlg.GetPath()
                self.last_open = os.path.dirname(dlg.GetPath())
                utils.reset(self)
                utils.load_ebuild(self, filename)
                #Add option to add overlay to file history?
                #self.filehistory.AddFileToHistory(filename)
            dlg.Destroy()

    def OnMnuHelpRef(self, event):
        """Display html help file"""
        utils.launch_browser(self,
                        "http://abeni.sf.net/docs/ebuild-quick-reference.html")

    def OnLaunchBugz(self, event):
        """Launch browser to bugzilla nbr in Notes tab"""
        bugz = self.text_ctrl_bugz.GetValue()
        if bugz:
            uri = "http://bugs.gentoo.org/show_bug.cgi?id=%s" % bugz
        else:
            uri = "http://bugs.gentoo.org/query.cgi"
        utils.launch_browser(self, uri)
        
    def OnMnuHelp(self, event):
        """Display html help file"""
        utils.launch_browser(self, "http://abeni.sf.net/docs/index.html")

    def OnCloseBuffer(self, event):
        """Close displayed editor buffer"""
        self.CloseBuffer()

    def CloseBuffer(self):
        """Close editor buffer"""
        page = self.notebook_editor.GetSelection()
        try:
            del self.eds[page]
        except IndexError:
            #no more pages in notebook
            return
        del self.ed_panels[page]
        del self.filename[page]
        self.notebook_editor.DeletePage(page)
        page = self.notebook_editor.GetSelection()
        self.ed_shown = page
        self.UpdateChangedTab()
        utils.reset(self)
        #if no more buffers open, disable menus/toolbars
        if not self.QueryEditing():
            self.DisableMenus()
            self.EnableToolbar(False)

    def OnMnuDeleteEbuild(self, event):
        """Delete ebuild from disk in overlay"""

        if PORTDIR in self.filename[self.ed_shown]:
            msg = "Ebuild isn't saved in PORTDIR_OVERLAY. Can't delete."
            utils.my_message(self, msg, "Error", "error")
            return

        dlg = wx.MessageDialog(self,
                               "DELETE this ebuild from PORTDIR_OVERLAY?\n"+ \
                               self.filename[self.ed_shown],
                               "DELETE ebuild?",
                               wx.YES_NO | wx.ICON_INFORMATION)
        val = dlg.ShowModal()
        if val == wx.ID_YES:
            utils.delete_ebuild(self)
            self.CloseBuffer()

    def OnMnuSave(self, event):
        """Save ebuild file to disk"""
        if not self.ThisEd().IsShown():
            #self.Write("!!! Error - Check Category, PN, PVR")
            return
        utils.save_ebuild(self)

    def FindReplace(self, target, replace):
        """Replace entire line containing target in ThisEd(). return length
           of str replaced if found"""
        #Note: If we replace string with "" this will return 0
        #so don't use the length to determine if we matched anything
        s = self.ThisEd().FindText(0,
                                    self.LastPos(),
                                    '^%s' % target,
                                    wx.stc.STC_FIND_REGEXP
                                    )
        e = self.ThisEd().GetLineEndPosition( \
                                        self.ThisEd().LineFromPosition(s))
        if s != -1:
            self.ThisEd().SetTargetStart(s)
            self.ThisEd().SetTargetEnd(e)
            return self.ThisEd().ReplaceTarget(replace)
        else:
            return -1

    def OnMnuNew(self, event):
        """Creates a new ebuild from scratch"""
        win = GetURIDialog.GetURIDialog(self, -1, "Enter Package URI",
                           size = wx.Size(350, 200),
                           style = wx.DEFAULT_DIALOG_STYLE 
                           )
        win.CenterOnScreen()
        val = win.ShowModal()
        if val != wx.ID_OK:
            return
        uri = win.URI.GetValue()
        template = win.GetTemplate()
        pn = win.text_ctrl_pn.GetValue()
        pv = win.text_ctrl_pvr.GetValue()
        cat = win.text_ctrl_category.GetValue()
        win.Destroy()
        if not pn or not pv:
            utils.my_message(self, "${P} not properly set! Check PN and PVR\n" +
                             "Error with ${P}", "error")
            return
        homepage, uri_out = "", ""
        if uri.find('sourceforge') != -1:
            tst_uri = urlparse.urlparse(uri)
            if tst_uri[2].find('sourceforge') != -1:
                uri = 'mirror:/%s' % tst_uri[2]
                homepage = "http://sourceforge.net/projects/%s" % \
                           tst_uri[2].split("/")[2]
            else:
                self.Write("))) Couldn't convert URI to " + \
                           "mirror://sourceforge/ format.")
        utils.reset(self) 
        my_p = ""
        if enamer.is_good_filename(uri):
            uri_out, foo, bar = enamer.get_components(uri)
        else:
            uri_out, my_p = enamer.get_myp(uri)
            my_p = my_p.replace(pn, "${PN}")
            my_p = my_p.replace(pv, "${PV}")
        self.text_ctrl_Category.SetValue(cat)
        self.text_ctrl_PN.SetValue(pn)
        self.text_ctrl_PVR.SetValue(pv)
        self.Write('))) Pkg URI="%s"' % uri)
        self.Write('))) I will try to determine ${S} when you unpack.')
        self.AddEditor("filename", "untitled")

        self.ThisEd().SetText(open("/usr/share/abeni/templates/%s" % template, 'r').read())

        if homepage:
            self.FindReplace('HOMEPAGE', 'HOMEPAGE="%s"' % homepage)
        if my_p:
            self.FindReplace('DESCRIPTION=""',
                             'MY_P="%s"\nDESCRIPTION=""' % my_p)
        self.ThisEd().EmptyUndoBuffer()
        self.ThisEd().SetSavePoint()
        self.ThisEd().Show()
        self.FindReplace("SRC_URI", 'SRC_URI="%s"' % uri_out)
        self.SetTitle("Abeni * The ebuild Builder " + __version__.version)
        self.text_ctrl_Category.SetFocus()
        self.ApplyPrefs()
        utils.save_ebuild(self)

    def OnClose(self, event):
        """Do clean shutdown"""
        if self.running:
            self.Write("!!! You're executing %s" % self.running)
            return
        if not utils.query_all_modify(self):
            bookmarks = os.path.expanduser('~/.abeni/recent.txt')
            f = open(bookmarks, 'w')
            for e in range(self.filehistory.GetNoHistoryFiles()):
                f.write(self.filehistory.GetHistoryFile(e) + '\n')
            f.close()

            #Save size of window:
            self.pref['splitterPosition'] = self.splitter.GetSashPosition()
            self.pref['splitter2Position'] = self.splitter_2.GetSashPosition()
            self.pref['frameSize'] = "%s %s" % (self.GetSize()[0],
                                                self.GetSize()[1])
            f = open(os.path.expanduser('~/.abeni/abenirc'), 'w')
            for v in self.pref.keys():
                f.write('%s = %s\n' % (v, self.pref[v]))
            f.close()
            self.Destroy()

    def OnMnuExit(self, event):
        """Exit application sanely"""
        self.OnClose(-1)

    def OnMnuUseHelp(self, event):
        """View PORTDIR/profiles/use.desc file"""
        utils.scroll_text_dlg(self, "%s/profiles/use.desc" % PORTDIR, 
                              "use.desc")

    def OnMnuLocalUseHelp(self, event):
        """View PORTDIR/profiles/use.local.desc file"""
        utils.scroll_text_dlg(self, "%s/profiles/use.local.desc" % PORTDIR,
                              "use.local.desc")

    def OnMnuCreateDigest(self, event):
        """Run 'ebuild filename digest' on this ebuild"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.\n" +
                             "I won't write to PORTDIR.", "error")
            return 0

        if not utils.verify_saved(self):
            self.action = "digest"
            log_msg = '))) Creating digest...'
            cmd = 'sudo /usr/sbin/ebuild %s digest' % self.filename[self.ed_shown]
            self.ExecuteInLog(cmd, log_msg)

    def OnToolbarCompile(self, event):
        """ebuild <this ebuild> compile"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.",
                             "error")
            return 0
        if not utils.verify_saved(self):
            self.action = "compile"
            log_msg = '))) Compiling...'
            cmd = '''xterm -e "sudo sh -c 'export %s;export USE='%s';sudo ebuild %s compile 2>&1| tee /var/tmp/abeni/emerge_log'"''' \
                     % (self.noauto, self.pref['use'], self.filename[self.ed_shown])
            self.ExecuteInLog(cmd, log_msg)

    def OnMnuClean(self, event):
        """Run 'ebuild filename clean' on this ebuild"""
        log_msg = '))) Cleaning...'
        self.action = "clean"
        cmd = 'sudo /usr/sbin/ebuild %s clean' % self.filename[self.ed_shown]
        self.ExecuteInLog(cmd, log_msg)

    def OnToolbarEdit(self, event):
        """Edit ebuild in editor buffer in external editor"""
        self.OnMnuEdit()

    def OnToolbarUnpack(self, event): 
        """ebuild <this ebuild> unpack"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.",
                             "error")
            return 0
        if not utils.verify_saved(self):
            self.action = 'unpack'
            cmd = 'sudo /usr/sbin/ebuild %s unpack' % self.filename[self.ed_shown]
            self.ExecuteInLog(cmd, "))) Unpacking..." )

    def OnToolbarInstall(self, event):
        """ebuild <this ebuild> Install"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.",
                             "error")
            return 0

        if not utils.verify_saved(self):
            self.action = 'install'
            log_msg = '))) Installing...'
            cmd = '''xterm -e "sudo sh -c 'export %s;export USE='%s';sudo ebuild %s install 2>&1|tee /var/tmp/abeni/emerge_log'"''' \
                  % (self.noauto, self.pref['use'], self.filename[self.ed_shown])


            self.ExecuteInLog(cmd, log_msg)

    def OnToolbarQmerge(self, event):
        """ebuild <this ebuild> qmerge"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.",
                             "error")
            return 0

        if not utils.verify_saved(self):
            self.action = 'qmerge'
            log_msg = '))) Qmerging...'
            cmd = '''xterm -e "sudo sh -c 'export %s;export USE='%s';sudo ebuild %s qmerge 2>&1|tee /var/tmp/abeni/emerge_log'"''' \
                  % (self.noauto, self.pref['use'], self.filename[self.ed_shown])
            self.Write(cmd)
            self.ExecuteInLog(cmd, log_msg)

    def OnMnuImportPatch(self, event):
        """Import an existing patch"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.",
                             "error")
            return 0

        f = utils.get_files_dir(self)
        dlg = wx.FileDialog(self, "Choose a file", "/var/tmp/abeni/", "", 
                            "*", wx.OPEN)

        if dlg.ShowModal() == wx.ID_OK:
            orig = dlg.GetPaths()
        else:
            return

        base = os.path.basename(orig[0])
        dest = "%s/%s" % (f, base)
        shutil.copy(orig[0], dest)

        epatch = "epatch ${FILESDIR}/%s" % base
        self.SrcUnpackEpatch(epatch)

    def OnMnuMakePatch(self, event):
        """Create a patch from something in ${S}"""
        if not utils.is_overlay(self.filename[self.ed_shown]):
            utils.my_message(self, "You need to save the ebuild first.",
                             "error")
            return 0

        if not utils.is_unpacked(self):
            msg = 'You need to unpack first'
            utils.my_message(self, msg, "Error", "error")
            return
        self.CreatePatch()

    def CreatePatch(self, orig=[]):
        """Creates patch from given file or selected from dialog"""
        if not self.pref['editor']:
            utils.my_message(self, "No editor defined in perferences", 
                             "Error: no editor defined", "error")
            return

        if not orig:
            s = utils.get_s(self)
            dlg = wx.FileDialog(self, "Choose a file", s, "", "*", wx.OPEN)

            if dlg.ShowModal() == wx.ID_OK:
                orig = dlg.GetPaths()
            else:
                return
        f = utils.get_files_dir(self)
        #copy file to /var/tmp
        fdir = utils.get_files_dir(self)
        os.system("sudo chown root:portage %s" % fdir)
        os.system("sudo chmod 775 %s" % fdir)
        tmpdir = tempfile.mkdtemp(suffix='', prefix='tmp', dir=None)
        tmp_patch = os.path.join(tmpdir, "tmp_patch")
        base = os.path.basename(orig[0])
        shutil.copy(orig[0], tmpdir)
        out = os.path.join(tmpdir, base)
        os.system('%s %s' % (self.pref['editor'], out))
        os.system("diff -u %s %s > %s" % (orig[0], out, tmp_patch))

        dlg = wx.TextEntryDialog(self, 'Choose name for your patch:',
                            'Choose patch name', '')
        dlg.SetValue('choose_a_name.patch')
        if dlg.ShowModal() == wx.ID_OK:
            pname = dlg.GetValue()
        else:
            return

        dest = "%s/%s" % (f, pname)
        shutil.copy(tmp_patch, dest)
        try:
            os.unlink(tmp_patch)
        except:
            pass

        #insert inheirt eutils:
        p = self.ThisEd().FindText(0, self.LastPos(), "^inherit",
                                    wx.stc.STC_FIND_REGEXP)
        if p != -1:
            #already have inherit line, check if has eutils 
            pe = self.ThisEd().FindText(p, p+80, "eutils", 
                                         wx.stc.STC_FIND_REGEXP)
            if pe == -1:
                #already have eutils inheritted
                self.ThisEd().InsertText(p + 8, "eutils ")
                self.Write("))) Added 'inherit eutils' so you can use epatch.")
        else:
            #find first blank line
            b = self.ThisEd().GetLineEndPosition(2)
            self.ThisEd().InsertText(b+1, "\ninherit eutils\n")
            self.Write("))) Added 'inherit eutils' in order to use epatch")
        epatch = "epatch ${FILESDIR}/%s || die 'epatch failed on %s'" % \
                  (pname, pname)

        self.SrcUnpackEpatch(epatch)

    def SrcUnpackEpatch(self, epatch):        
        """Insert src_unpack() with epatch code"""
        
        p = self.ThisEd().FindText(0, self.LastPos(), "src_unpack")
        if p == -1:
            n = self.LastPos()
            unpck = '''src_unpack() {\n\tunpack ${A} || die "Failed to unpack ${A}"\n\tcd ${S} || die "Failed to cd ${S}"\n\t%s\n\n}''' % epatch
            self.ThisEd().InsertText(n, "\n\n%s\n" % unpck)
            self.Write("))) Added src_unpack() with epatch line")
        else:
            #have existing src_unpack, add epatch line
            #TODO: use regex
            #TODO: Make function to return first and last pos of given function
            p = self.ThisEd().FindText(0, self.LastPos(), "src_unpack")
            lp = self.ThisEd().FindText(p, self.LastPos(), "^}", 
                                         wx.stc.STC_FIND_REGEXP)
            if lp != -1:
                self.ThisEd().InsertText(lp, "\n\t%s\n" % epatch)
                self.Write("))) Inserted 'epatch' line in src_unpack()")

    def LastPos(self):
        """Return last position in editor"""
        return self.ThisEd().GetLineEndPosition(self.ThisEd().GetLineCount())
    
    def FindVar(self, var, idx=None):
        """Searches ed[idx] for variable name, returns value"""
        if idx is None:
            idx = self.ed_shown
        p = self.eds[idx].FindText(0, self.LastPos(), "^%s" % var,
                                    wx.stc.STC_FIND_REGEXP)
        if p != -1:
            pend = self.eds[idx].FindText(p, self.LastPos(), "$",
                                           wx.stc.STC_FIND_REGEXP)
            t = self.eds[idx].GetTextRange(p, pend).lstrip().rstrip()
            t = t.split("=")[1]
            t = t.replace('"', '')
            t = t.replace("'", '')
            return t.rstrip().lstrip()

    def OnMnuRepomanScan(self, event):
        """Run repoman --pretend scan on this ebuild"""
        log_msg = "))) repoman --pretend scan\n" + \
                 "))) Ignore warnings about ChangeLog and metadata.xml " + \
                 "because we're in the overlay dir\n\n" + \
                 "NOTE: We are doing 'repoman scan' in PORTDIR_OVERLAY" + \
                 "For CVS repoman scan, use the repoman console."
        cmd = 'cd %s;/usr/bin/repoman --pretend scan' % \
               utils.get_ebuild_dir(self)
        self.ExecuteInLog(cmd, log_msg)

    def OnMnuRepomanConsole(self, event):
        """Complete CVS repoman commit with scan, echangelog etc"""
        cat = utils.get_category_name(self)
        pn = utils.get_pn(self)
        cvs_root = self.pref["cvsRoot"]
        cvs_ebuild_dir = "%s/%s/%s" % (cvs_root, cat, pn)
        if not os.path.exists(cvs_ebuild_dir):
            dlg = wx.MessageDialog(self, "This package is not in CVS.\n" + \
                                   "Create dir and add pkg dir to CVS?\n" + \
                                   pn,
                                   "Add package to CVS?", 
                                   wx.YES_NO | wx.ICON_WARNING)
            val = dlg.ShowModal()
            if val != wx.ID_YES:
                return
        dlg = RepomanDialog.MyFrame(self)
        bugz, notes = utils.get_notes_info(self)
        dlg.SetNotesInfo(bugz, notes)
        dlg.CenterOnScreen()
        dlg.Show(True)
 
    def OnViewEnvironment(self, event=None):
        """Show environment file in editor window"""
        utils.view_environment(self)

    def OnMnuViewMetadata(self, event):
        """View metadata.xml in dialog window"""
        p = utils.get_portdir_path(self)
        if p:
            utils.scroll_text_dlg(self, '%s/metadata.xml' % p, "metadata.xml")
        else:
            utils.my_message(self, "No metadata.xml exists in PORTDIR",
                             "Error", "error")
 
    def OnMnuViewChangeLog(self, event):
        """View ChangeLog in dialog window"""
        p = utils.get_portdir_path(self)
        if p:
            filename = '%s/ChangeLog' % p
            utils.scroll_text_dlg(self, filename, "ChangeLog")
             
    def OnMnuLoadFromOverlay(self, event):
        """Load an ebuild from list of overlay ebuilds only"""
        #TODO: Create custom dialog with notebook for separate olay directories
        if not utils.verify_saved(self):
            cmd = "find %s -name '*.ebuild'" % PORTDIR_OVERLAY
            r, choices = utils.run_ext_cmd(cmd)
            choices.sort()
            out = []
            for l in choices:
                out.append(l.replace(('%s/' % PORTDIR_OVERLAY), ''))
            dlg = wx.SingleChoiceDialog(self, 'Load overlay ebuild:',
                                        'Load overlay ebuild', out, 
                                        wx.OK|wx.CANCEL
                                       )
            if dlg.ShowModal() == wx.ID_OK:
                e = dlg.GetStringSelection()
                utils.reset(self)
                filename = "%s/%s" % (PORTDIR_OVERLAY, e)
                if os.path.isfile(filename):
                    utils.load_ebuild(self, filename)
                    self.filehistory.AddFileToHistory(filename)
            dlg.Destroy()

    def OnMnuPrivHelp(self, event):
        """View private portage fnunctions"""
        win = PortageFuncsDialog.MyDialog(self, -1,
                                          "Portage Private Functions",
                                          style = wx.DEFAULT_DIALOG_STYLE
                                         )
        win.CenterOnScreen()
        win.ShowModal()

    def OnMnuEclassHelp(self, event):
        """View an eclass file"""
        eclass_dir = "%s/eclass/" % PORTDIR
        choices = os.listdir(eclass_dir)
        choices.sort()
        dlg = wx.SingleChoiceDialog(self, 'View an Eclass', 'Eclass',
                                    choices, wx.OK|wx.CANCEL
                                    )
        if dlg.ShowModal() == wx.ID_OK:
            eclass = dlg.GetStringSelection()
            utils.scroll_text_dlg(self, "%s/%s" % (eclass_dir, eclass), eclass)
        else:
            dlg.Destroy()
            return

    def OnMnuDiff(self, event):
        """diff against original ebuild in PORTDIR"""
        cat = utils.get_category_name(self)
        pn = utils.get_pn(self)
        ebuild = "%s.ebuild" % utils.get_p(self)
        orig_ebuild = "%s/%s/%s/%s" % (PORTDIR, cat, pn, ebuild)
        this_ebuild = utils.get_filename(self)

        if not os.path.exists(orig_ebuild):
            utils.my_message(self, "No matching ebuild in PORTDIR found.",
                             "Error", "error"
                            )
            return

        if orig_ebuild == this_ebuild:
            utils.my_message(self, "Can't diff. This is the PORTDIR version!",
                             "Error", "error")
            return

        if not os.path.exists(this_ebuild):
            utils.my_message(self, "Can't diff. Save this ebuild first.",
                             "Error", "error")
            return

        app = self.pref['diff']
        os.system("%s %s %s &" % (app, orig_ebuild, this_ebuild))

    def OnMnuFileCopy(self, event):
        """Copy from PORTDIR FILESDIR to PORTDIR_OVERLAY FILESDIR"""
        fdir_overlay = utils.get_ebuild_dir(self)
        cat = utils.get_category_name(self)
        pn = utils.get_pn(self)
        fdir_port = "%s/%s/%s" % (PORTDIR, cat, pn)

        fdir = "%s/files" % fdir_overlay

        if not os.path.exists(fdir):
            dlg = wx.MessageDialog(self,
                  "${FILESDIR} does not exist.\n\nNo digest yet?",
                  "Error", wx.OK
                  )
            dlg.ShowModal()
            dlg.Destroy()
            return

        if not os.path.exists(fdir_port):
            fdir_port = ""
        win = FileCopyDialog.wxFrame1(self, fdir_port, fdir_overlay)
        win.CenterOnScreen()
        win.Show(True)

    def OnMnuPref(self, event):
        """Modify preferences"""
        win = PrefsDialog.MyDialog(self, -1, "Preferences",
        #win = MyDialog(self, -1, "Preferences",
                                   size=wx.Size(350, 200),
                                   style = wx.DEFAULT_DIALOG_STYLE
                                  )
        win.CenterOnScreen()
        val = win.ShowModal()
        if val == wx.ID_OK:
            self.pref['browser'] = win.text_ctrl_browser.GetValue()
            self.pref['xterm'] = win.text_ctrl_xterm.GetValue()
            self.pref['diff'] = win.text_ctrl_diff.GetValue()
            self.pref['editor'] = win.text_ctrl_editor.GetValue()
            self.pref['use'] = win.text_ctrl_USE.GetValue()
            self.pref['features'] = win.text_ctrl_FEATURES.GetValue()
            self.pref['cvsRoot'] = win.text_ctrl_cvs_root.GetValue()
            self.pref['stripHeader'] = win.checkbox_strip_header.GetValue()
            self.pref['externalControl'] = win.checkbox_external_control.GetValue()
            self.pref['clearLog'] = win.checkbox_clear_log_window.GetValue()
            self.pref['checkSyntax'] = win.checkbox_check_syntax.GetValue()
            self.pref['logfile'] = win.checkbox_logfile.GetValue()
            self.pref['logFilename'] = win.text_ctrl_logfile.GetValue()
            self.pref['font'] = win.text_ctrl_font.GetValue()
            self.pref['highlighting'] = win.checkbox_highlight.GetValue()
            self.pref['gentooHighlight'] = win.checkbox_gentoo_highlighting.GetValue()
            self.pref['show_whitespace'] = win.checkbox_whitespace.GetValue()
            self.pref['tabsize'] = win.text_ctrl_1.GetValue()
            self.pref['db'] = win.radio_box_database.GetSelection()
            f = open(os.path.expanduser('~/.abeni/abenirc'), 'w')

            for v in self.pref.keys():
                f.write('%s = %s\n' % (v, self.pref[v]))
            f.close()
            #apply prefs to every open editor
            self.ApplyPrefs(all = True)

    def ApplyPrefs(self, all = False):
        """Apply changes after getting prefs"""
        if self.pref['logfile'] == 1:
            self.logfile = open(self.pref['logFilename'], 'a')
        else:
            self.logfile = None

        if self.pref['db'] == 0:
            self.text_ctrl_notes.Enable(False)
            self.text_ctrl_bugz.Enable(False)
        else:
            self.text_ctrl_notes.Enable(True)
            self.text_ctrl_bugz.Enable(True)
            utils.load_db_record(self)

        buffs =  self.QueryEditing()
        if not buffs:
            return
        if all:
            toapply = range(buffs)
        else:
            toapply = [self.notebook_editor.GetSelection()]

        face, size = self.pref['font'].split(",")
        for editor in toapply:
        #return self.eds[self.notebook_editor.GetSelection()]
            self.eds[editor].SetMyStyle() 
            self.eds[editor].StyleSetFontAttr(0, int(size), face, 0, 0, 0)
            ##comments: 1
            self.eds[editor].StyleSetFontAttr(1, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(2, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(3, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(4, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(5, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(6, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(7, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(8, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(9, int(size), face, 0, 0, 0)
            self.eds[editor].StyleSetFontAttr(10, int(size), face, 0, 0, 0)
        #if self.pref['externalControl'] == 1:
        #self.ExternalControlListen()


    #def ExternalControlListen(self):
    #    """Start timer to call ipc to get external vim commands"""
    #    ID_Timer = wx.NewId()
    #    self.extTimer = wx.Timer(self, ID_Timer)
    #    wx.EVT_TIMER(self,  ID_Timer, self.OnExtTimer)
    #    self.extTimer.Start(2000)

    def GetDbType(self):
        """Return type of database backend we are using"""
        if self.pref['db'] == 1:
            return "pysql"
        if self.pref['db'] == 2:
            return "postgresql"
        if self.pref['db'] == 3:
            return "firebird"
        if self.pref['db'] == 4:
            return "mysql"
        # 0 or invalid:
        return None

    def OnExtTimer(self, evt):
        """Do cmd recvd via ipc"""
        mq = pyipc.MessageQueue(100)
        data = mq.receive()
        if data:
            cmd, my_file = data.split("*")
            self.Write("))) External command:'%s'" % cmd)
            if cmd[4:] == "digest":
                self.OnMnuCreateDigest(-1)
            if cmd[4:] == "unpack":
                self.OnToolbarUnpack(-1)
            if cmd[4:] == "compile":
                self.OnToolbarCompile(-1)
            if cmd[4:] == "install":
                self.OnToolbarInstall(-1)
            if cmd[4:] == "qmerge":
                self.OnToolbarQmerge(-1)

    def OnMnuHelpFkeys(self, event):
        """List fkeys"""
        about = HelpFkeysDialog.MyHelpFkeys(self)
        about.ShowModal()
        about.Destroy()

    def OnMnuHelpCVS(self, event):
        """Repoman CVS help for Gentoo devs"""
        about = HelpCVSDialog.MyHelpCVS(self)
        about.ShowModal()
        about.Destroy()
        event.Skip()

    def OnMnuAbout(self, event):
        """Obligitory About me and my app screen"""
        about = AboutDialog.MyAboutBox(self)
        about.ShowModal()
        about.Destroy()
        event.Skip()

    def OnMnuExport(self, event):
        """Export ebuild and auxiliary files as tarball"""
        utils.export_ebuild(self)
        event.Skip()

    def OnMnuClearLog(self, event):
        """Clear the log window"""
        self.text_ctrl_log.SetValue('')
        event.Skip()

    def KillProc(self, event):
        """Kill processes when stop button clicked"""
        #os.system("sudo kill %s" % self.pid)
        #self.Write("Killed %s" % self.pid)
        #pid = open("/var/run/abeni_proc.pid", "r").read().strip()
        #os.system("sudo kill %s" % pid)
        #self.Write("sub pid %s killed" % pid)
        self.Write("If you're running a command in an xterm, " + \
                   "press Ctrl-C in that xterm.")
        event.Skip()

    def OnProcessEnded(self, evt):
        """Clean up after async command finishes"""
        #self.Write('OnProcessEnded, pid:%s,  exitCode: %s\n' %
        #               (evt.GetPid(), evt.GetExitCode()))
        self.timer.Stop()
        stream = self.process.GetInputStream()
        if stream.CanRead():
            text = stream.read()
            text = text.split('\n')
            for t in text:
                self.Write(t)
        self.process.Destroy()
        self.process = None
        self.toolbar.EnableTool(TB_STOP_ID, False)
        self.running = None
        action = self.action
        self.action = None
        utils.post_action(self, action)

    def OnXtermInCVS(self, event):
        """Launch xterm in CVS dir"""
        cvs_dir = self.pref['cvsRoot']
        if not os.path.exists(cvs_dir):
            msg = "Path doesn't exist: %s\n\nSet your CVS root in Dev Prefs." \
                  % cvs_dir
            utils.my_message(self, msg, "Error", "error")
            return
        cat = utils.get_category_name(self)
        pn = utils.get_pn(self)
        cvs_path = "%s/%s/%s" % (cvs_dir, cat, pn)
        if not os.path.exists(cvs_path):
            msg = "Path doesn't exist: %s" % cvs_path
            utils.my_message(self, msg, "Error", "error")
            return
        else:
            c = os.getcwd()
            os.chdir(cvs_path)
            if self.pref['xterm']:
                try:
                    os.system('%s &' % self.pref['xterm'])
                    os.chdir(c)
                except:
                    pass
            else:
                utils.my_message(self, "Set xterm in preferences",
                                 "Error - no xterm", "error"
                                )


    def OnXtermInD(self, event):
        """Launch xterm in ${D}"""
        if not utils.is_unpacked(self):
            msg = 'You need to unpack the package first.'
            utils.my_message(self, msg, "Error", "error")
        else:
            c = os.getcwd()
            p = utils.get_p(self)
            d = '%s/portage/%s/image/' % (PORTAGE_TMPDIR, p)
            if os.path.exists(d):
                os.chdir(d)
            else:
                msg = 'You need to run src_install() first.'
                utils.my_message(self, msg, "Error", "error")
                return
            if self.pref['xterm']:
                try:
                    os.system('%s &' % self.pref['xterm'])
                except:
                    pass
            else:
                utils.my_message(self, "Set xterm in preferences",
                                 "Error - no xterm", "error"
                                )
            os.chdir(c)


    def OnXtermInS(self, event):
        """Launch xterm in ${S}"""
        if not utils.is_unpacked(self):
            msg = 'You need to unpack the package first.'
            title = 'Error'
            utils.my_message(self, msg, title, "error")
            return
        else:
            c = os.getcwd()
            p = utils.get_p(self)
            mys = utils.get_s(self)
            if os.path.exists(self.s):
                os.chdir(self.s)
            elif os.path.exists(mys):
                os.chdir(mys)
            else:
                try:
                    os.chdir('%s/portage/%s/work/' % (PORTAGE_TMPDIR, p))
                except:
                    pass
            xterm = self.pref['xterm']
            if xterm:
                try:
                    os.system('%s &' % xterm)
                    os.chdir(c)
                except:
                    print "Abeni error: Couldn't launch xterm"
            else:
                utils.my_message(self, "Set xterm in preferences",
                                 "Error - no xterm", "error"
                                 )

    def EditFile(self, f):
        """edit filename in external editor"""
        if not self.pref['editor']:
            utils.my_message(self, "No editor defined in perferences",
                             "Error: no editor defined", "error"
                             )
            return
        os.system('%s %s &' % (self.pref['editor'], f))

    def OnMnuEdit(self, event=None, save=1, filename=''):
        """Launch external editor then reload ebuild after editor exits"""
        if not utils.cmd_exists(self.pref['editor']):
            utils.my_message(self,
                            "You need to define an editor in preferences.",
                            "Error", "error"
                            )
            return
        if save:
            if utils.save_ebuild(self):
                if not filename:
                    f = self.filename[self.ed_shown]
                else:
                    f = filename
                os.system('%s %s' % (self.pref['editor'], f))
                txt = open(f, "r").read()
                self.ThisEd().SetText(txt)
                self.ThisEd().EmptyUndoBuffer()
                self.ThisEd().SetSavePoint()
                #utils.load_ebuild(self, f)

    def OnMnuRepomanFull(self, event):
        """Run repoman --pretend full on this ebuild"""
        log_msg = "))) repoman --pretend full\n"+ \
                 "))) Ignore warnings about metadata.xml "+ \
                 "because we're in the overlay dir"
        cmd = 'cd %s;/usr/bin/repoman --pretend full' % \
               utils.get_ebuild_dir(self)
        self.ExecuteInLog(cmd, log_msg)

    def OnMnuEmerge(self, event):
        """Run 'emerge <options> <this ebuild>' """
        if not utils.verify_saved(self):
            win = EmergeDialog.EmergeDialog(self, -1, "Enter emerge options",
                                            size = wx.Size(350, 350),
                                            style = wx.DEFAULT_DIALOG_STYLE 
                                            )
            win.CenterOnScreen()
            val = win.ShowModal()
            if val == wx.ID_OK:
                self.action = "emerge"
                cmd = '''xterm -e "sudo sh -c 'export USE='%s';%s | tee /var/tmp/abeni/emerge_log'"''' \
                         % (win.use.GetValue(), win.emerge.GetValue())
                log_msg = "))) %s" % cmd
                self.ExecuteInLog(cmd, log_msg)

    def OnMnuEbuild(self, event):
        """Run 'ebuild <file> <cmd>' """
        c = ['setup', 'depend', 'merge', 'qmerge', 'unpack',
             'compile', 'rpm', 'package', 'prerm', 'postrm',
             'preinst', 'postinst', 'config', 'touch', 'clean',
             'fetch', 'digest', 'install', 'unmerge'
            ]
        c.sort()
        dlg = wx.SingleChoiceDialog(self, 'Command:', 'ebuild command',
                                    c, wx.OK|wx.CANCEL)
        if dlg.ShowModal() == wx.ID_OK:
            opt = dlg.GetStringSelection()
            dlg.Destroy()
        else:
            dlg.Destroy()
            return

        if not utils.verify_saved(self):
            if opt == 'setup':
                self.action = 'setup'
            cmd = 'USE="%s" FEATURES="%s" sudo /usr/sbin/ebuild %s %s' % \
                    (self.pref['use'], self.pref['features'],
                     self.filename[self.ed_shown], opt
                    )
            log_msg = "))) Executing:\n"
            log_msg += ")))   USE='%s' FEATURES='%s'\n" % (self.pref['use'],
                                                          self.pref['features']
                                                         )
            log_msg += ")))   sudo ebuild %s %s" % (self.filename[self.ed_shown], opt)
            self.ExecuteInLog(cmd, log_msg)

    def OnNextBuffer(self, event):
        """Switch notebook page to next editor"""
        next_pg = self.notebook_editor.GetSelection() + 1
        nbr_pages = self.notebook_editor.GetPageCount()
        if next_pg >= nbr_pages:
            next_pg = 0
        self.notebook_editor.SetSelection(next_pg)

    def OnPreviousBuffer(self, event):
        """Switch notebook page to previous editor"""
        cur = self.notebook_editor.GetSelection()
        try:
            self.notebook_editor.SetSelection(cur - 1)
        except:
            nbr_pages = self.notebook_editor.GetPageCount()
            self.notebook_editor.SetSelection(nbr_pages -1)


    def OnEdChanged(self, event): # wxGlade: MyFrame.<event_handler>
        """Change title, tabs, filename label after notebook page changes"""
        #When an ebuild loads, it adds a notebook page and so generates 
        #a page change event. we don't want update the tab twice:
        if not self.loading_ebuild:
            self.UpdateChangedTab()
        event.Skip()

    def ThisEd(self):
        """returns currently displayed editor"""
        return self.eds[self.notebook_editor.GetSelection()]

    def UpdateChangedTab(self):
        """Change title, tabs, filename label after notebook page changes"""
        self.ed_shown = self.notebook_editor.GetSelection()
        if not len(self.eds):
            #Last editor was closed
            utils.reset(self)
            self.SetTitle(utils.get_p(self) + " - Abeni " + __version__.version)
            self.label_filename.SetLabel("")
            return
        utils.reset(self)
        utils.switch_ebuilds(self)
        self.ThisEd().DoTitle(False)
        utils.set_status(self, self.ed_shown)
        wx.CallAfter(self.ThisEd().SetFocus)

    def OnEdChanging(self, event): # wxGlade: MyFrame.<event_handler>
        """Catch page changes in notebook before new page is selected"""
        event.Skip()

# end of class MyFrame

