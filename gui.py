# generated by wxGlade 0.3.3 on Fri Jul 16 23:41:54 2004

import os
import urlparse
import string
import shutil
import sys

from wxPython.lib.dialogs import wxMultipleChoiceDialog
from wxPython.lib.dialogs import wxScrolledMessageDialog
from wxPython.wx import *
from wxPython.stc import *
from portage import config, settings, pkgsplit

import utils
import abeniCVS
import __version__ 
import AboutDialog
import PrefsDialog
import EmergeDialog
import GetURIDialog
import AddFunctionDialog
import FileCopyDialog
import HelpFkeysDialog
import HelpCVSDialog
import PortageFuncsDialog
import pyipc
import options 

env = config(clone=settings).environ()
portdir_overlay = env['PORTDIR_OVERLAY'].split(" ")[0]
if portdir_overlay[-1] == "/":
    portdir_overlay = portdir_overlay[:-1]
portdir = env['PORTDIR']
portage_tmpdir = env['PORTAGE_TMPDIR']

class MyFrame(wxFrame):
    def __init__(self, *args, **kwds):

        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wxCAPTION|wxMINIMIZE_BOX|wxMAXIMIZE_BOX|wxSYSTEM_MENU|wxRESIZE_BORDER
        wxFrame.__init__(self, *args, **kwds)
        self.panel_1 = wxPanel(self, -1)
        self.splitter = wxSplitterWindow(self.panel_1, -1, style=wxSP_3D|wxSP_BORDER)
        self.notebook_1 = wxNotebook(self.splitter, -1, style=wxNB_BOTTOM)
        self.panel_environment = wxPanel(self.notebook_1, -1)
        self.panel_explorer = wxPanel(self.notebook_1, -1)
        self.window_1 = wxSplitterWindow(self.panel_explorer, -1, style=wxSP_3D|wxSP_BORDER)
        self.window_1_pane_2 = wxPanel(self.window_1, -1)
        self.window_1_pane_1 = wxPanel(self.window_1, -1)
        self.panel_log = wxPanel(self.notebook_1, -1)
        self.panel_1_copy = wxPanel(self.panel_1, -1)
        
        # Menu Bar
        self.menubar = wxMenuBar()
        self.SetMenuBar(self.menubar)
        global mnuNewID; mnuNewID = wxNewId()
        global mnuLoadOverlayID; mnuLoadOverlayID = wxNewId()
        global mnuLoadID; mnuLoadID = wxNewId()
        global mnuSaveID; mnuSaveID = wxNewId()
        global mnuDelID; mnuDelID = wxNewId()
        global mnuExportID; mnuExportID = wxNewId()
        global exitID; exitID = wxNewId()
        global mnuFindID; mnuFindID = wxNewId()
        global mnuFindAgainID; mnuFindAgainID = wxNewId()
        global mnuAddFuncID; mnuAddFuncID = wxNewId()
        global mnuLicenseID; mnuLicenseID = wxNewId()
        global mnuCleanID; mnuCleanID = wxNewId()
        global mnuDigestID; mnuDigestID = wxNewId()
        global mnuUnpackID; mnuUnpackID = wxNewId()
        global mnuCompileID; mnuCompileID = wxNewId()
        global mnuInstallID; mnuInstallID = wxNewId()
        global mnuEbuildID; mnuEbuildID = wxNewId()
        global mnuEmergeID; mnuEmergeID = wxNewId()
        global mnuRepoScanID; mnuRepoScanID = wxNewId()
        global mnuPatchID; mnuPatchID = wxNewId()
        global mnuImportID; mnuImportID = wxNewId()
        global mnuDiffID; mnuDiffID = wxNewId()
        global mnuRepoFullID; mnuRepoFullID = wxNewId()
        global mnuFileCopyID; mnuFileCopyID = wxNewId()
        global mnuXtermSID; mnuXtermSID = wxNewId()
        global mnuXtermDID; mnuXtermDID = wxNewId()
        global mnuXtermCVSID; mnuXtermCVSID = wxNewId()
        self.mnuFullCommitID = wxNewId()
        global mnuEditID; mnuEditID = wxNewId()
        global mnuViewMetadataID; mnuViewMetadataID = wxNewId()
        global mnuViewChangeLogID; mnuViewChangeLogID = wxNewId()
        global mnuClearLogID; mnuClearLogID = wxNewId()
        global mnuPrefID; mnuPrefID = wxNewId()
        global mnuHelpID; mnuHelpID = wxNewId()
        global mnuHelpRefID; mnuHelpRefID = wxNewId()
        global mnuEclassID; mnuEclassID = wxNewId()
        global mnuPrivID; mnuPrivID = wxNewId()
        global mnuUseID; mnuUseID = wxNewId()
        global mnulocalUseID; mnulocalUseID = wxNewId()
        global mnuFKEYS_ID; mnuFKEYS_ID = wxNewId()
        global mnuCVS_ID; mnuCVS_ID = wxNewId()
        global mnuAboutID; mnuAboutID = wxNewId()
        self.fileMenu = wxMenu()
        self.fileMenu.Append(mnuNewID, "&New ebuild", "", wxITEM_NORMAL)
        self.fileMenu.Append(mnuLoadOverlayID, "L&oad ebuild from PORTDIR_OVERLAY", "", wxITEM_NORMAL)
        self.fileMenu.Append(mnuLoadID, "&Load ebuild from PORTDIR", "", wxITEM_NORMAL)
        self.fileMenu.Append(mnuSaveID, "&Save ebuild\tCtrl-S", "", wxITEM_NORMAL)
        self.fileMenu.Append(mnuDelID, "&Delete this ebuild", "", wxITEM_NORMAL)
        self.fileMenu.Append(mnuExportID, "&Export ebuild and aux files to tar", "", wxITEM_NORMAL)
        self.fileMenu.Append(exitID, "E&xit\tAlt-X", "", wxITEM_NORMAL)
        self.menubar.Append(self.fileMenu, "&File")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(mnuFindID, "&Find\tCtrl-F", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuFindAgainID, "Find a&gain\tCtrl-g", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Edit")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(mnuAddFuncID, "&Function\tF6", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuLicenseID, "&License", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Insert")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(mnuCleanID, "&Clean\tShift-F1", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuDigestID, "&Digest\tF1", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuUnpackID, "&Unpack\tF2", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuCompileID, "C&ompile\tF3", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuInstallID, "&Install\tF4", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(wxNewId(), "&Qmerge\tF5", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuEbuildID, "&ebuild <this ebuild> command\tF9", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuEmergeID, "e&merge <opts><this ebuild>\tF10", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuRepoScanID, "&Repoman scan", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuPatchID, "Create patch from source in ${S}", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuImportID, "&Import existing patch", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuDiffID, "diff of this ebuild against PORTDIR version", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuRepoFullID, "repoman full", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuFileCopyID, "${FILESDIR} copy/diff/edit/del\tF8", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuXtermSID, "xterm in ${S}\tF12", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuXtermDID, "xterm in ${D}", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuXtermCVSID, "xterm in CVS dir\tShift-F12", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Tools")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(self.mnuFullCommitID, "repoman cvs commit", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&CVS")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(mnuEditID, "&ebuild in external editor\tF7", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuViewMetadataID, "metadata.&xml", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuViewChangeLogID, "Change&Log", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&View")
        self.menu_options = wxMenu()
        self.menu_options.Append(mnuClearLogID, "&Clear log window\tF11", "", wxITEM_NORMAL)
        self.menubar.Append(self.menu_options, "Lo&g")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(mnuPrefID, "&Preferences", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Options")
        wxglade_tmp_menu = wxMenu()
        wxglade_tmp_menu.Append(mnuHelpID, "&Contents", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuHelpRefID, "Ebuild &Quick Reference", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuEclassID, "&eclasses", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuPrivID, "&Portage private functions", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuUseID, "USE variables", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnulocalUseID, "&local USE variables", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuFKEYS_ID, "List &Fkeys", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuCVS_ID, "Gentoo repoman &CVS help", "", wxITEM_NORMAL)
        wxglade_tmp_menu.Append(mnuAboutID, "&About Abeni", "", wxITEM_NORMAL)
        self.menubar.Append(wxglade_tmp_menu, "&Help")
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(2, 0)
        
        # Tool Bar
        self.toolbar = wxToolBar(self, -1, style=wxTB_HORIZONTAL|wxTB_FLAT)
        self.SetToolBar(self.toolbar)
        global newID; newID = wxNewId()
        global openID; openID = wxNewId()
        global openOvlID; openOvlID = wxNewId()
        global saveID; saveID = wxNewId()
        global editID; editID = wxNewId()
        global newFuncID; newFuncID = wxNewId()
        global toolCleanID; toolCleanID = wxNewId()
        global digestID; digestID = wxNewId()
        global unpackID; unpackID = wxNewId()
        global compileID; compileID = wxNewId()
        global installID; installID = wxNewId()
        global qmergeID; qmergeID = wxNewId()
        global ebuildID; ebuildID = wxNewId()
        global emergeID; emergeID = wxNewId()
        global xtermID; xtermID = wxNewId()
        self.StopID = wxNewId()
        self.toolbar.AddLabelTool(newID, "new", wxBitmap("/usr/share/pixmaps/abeni/new.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "New ebuild", "")
        self.toolbar.AddLabelTool(openID, "open", wxBitmap("/usr/share/pixmaps/abeni/open.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Open ebuild in PORTDIR", "")
        self.toolbar.AddLabelTool(openOvlID, "openOvl", wxBitmap("/usr/share/pixmaps/abeni/open_ovl.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Open ebuild in PORTDIR_OVERLAY", "")
        self.toolbar.AddLabelTool(saveID, "save", wxBitmap("/usr/share/pixmaps/abeni/save.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Save ebuild Ctrl-S", "")
        self.toolbar.AddLabelTool(editID, "edit", wxBitmap("/usr/share/pixmaps/abeni/edit.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Edit ebuild in external editor F7", "")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(newFuncID, "newFunc", wxBitmap("/usr/share/pixmaps/abeni/fx.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "New Function F6", "")
        self.toolbar.AddLabelTool(toolCleanID, "clean", wxBitmap("/usr/share/pixmaps/abeni/clean.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Clean Shift-F1", "")
        self.toolbar.AddLabelTool(digestID, "digest", wxBitmap("/usr/share/pixmaps/abeni/digest.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Digest F1", "")
        self.toolbar.AddLabelTool(unpackID, "unpack", wxBitmap("/usr/share/pixmaps/abeni/unpack.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Unpack F2", "")
        self.toolbar.AddLabelTool(compileID, "compile", wxBitmap("/usr/share/pixmaps/abeni/compile.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Compile F3", "")
        self.toolbar.AddLabelTool(installID, "install", wxBitmap("/usr/share/pixmaps/abeni/install.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Install F4", "")
        self.toolbar.AddLabelTool(qmergeID, "qmerge", wxBitmap("/usr/share/pixmaps/abeni/qmerge.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Qmerge F5", "")
        self.toolbar.AddLabelTool(ebuildID, "ebuild", wxBitmap("/usr/share/pixmaps/abeni/ebuild.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "ebuild <this ebuild> command F9", "")
        self.toolbar.AddLabelTool(emergeID, "emerge", wxBitmap("/usr/share/pixmaps/abeni/emerge.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "emerge <options><this ebuild> F10", "")
        self.toolbar.AddLabelTool(xtermID, "xterm", wxBitmap("/usr/share/pixmaps/abeni/xterm.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Launch xterm in $S F12", "")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(self.StopID, "stop", wxBitmap("/usr/share/pixmaps/abeni/stop.png", wxBITMAP_TYPE_ANY), wxNullBitmap, wxITEM_NORMAL, "Interrupt process running in log window", "")
        # Tool Bar end
        self.static_line_2 = wxStaticLine(self, -1)
        self.button_Category = wxButton(self.panel_1_copy, -1, "Category")
        self.text_ctrl_Category = wxTextCtrl(self.panel_1_copy, -1, "", style=wxTE_PROCESS_ENTER|wxTE_PROCESS_TAB)
        self.label_PN = wxStaticText(self.panel_1_copy, -1, "$PN")
        self.text_ctrl_PN = wxTextCtrl(self.panel_1_copy, -1, "", style=wxTE_PROCESS_ENTER|wxTE_PROCESS_TAB)
        self.label_PVR = wxStaticText(self.panel_1_copy, -1, "$PVR")
        self.text_ctrl_PVR = wxTextCtrl(self.panel_1_copy, -1, "", style=wxTE_PROCESS_ENTER|wxTE_PROCESS_TAB)
        self.static_line_3 = wxStaticLine(self.panel_1, -1)
        self.STCeditor = GentooSTC(self.splitter, -1)
        self.text_ctrl_log = wxTextCtrl(self.panel_log, -1, "", style=wxTE_MULTILINE|wxTE_READONLY)
        global treeID; treeID = wxNewId()
        self.tree_ctrl_1 = wxTreeCtrl(self.window_1_pane_1, treeID, style=wxSUNKEN_BORDER)
        self.explorer = wxGenericDirCtrl(self.window_1_pane_2, -1, filter="All files|*")
        self.button_view = wxButton(self.window_1_pane_2, -1, "View")
        self.button_edit = wxButton(self.window_1_pane_2, -1, "Edit")
        self.button_patch = wxButton(self.window_1_pane_2, -1, "Create patch")
        self.button_delete = wxButton(self.window_1_pane_2, -1, "Delete")
        self.text_ctrl_environment = wxTextCtrl(self.panel_environment, -1, "", style=wxTE_MULTILINE|wxTE_READONLY)
        self.button_env_refresh = wxButton(self.panel_environment, -1, "Refresh")
        self.radio_box_env = wxRadioBox(self.panel_environment, -1, "View", choices=["Brief", "Full"], majorDimension=1, style=wxRA_SPECIFY_ROWS)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Abeni")
        _icon = wxEmptyIcon()
        _icon.CopyFromBitmap(wxBitmap("/usr/share/pixmaps/abeni/abeni_logo16.png", wxBITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((882, 696))
        self.statusbar.SetStatusWidths([-1, 400])
        # statusbar fields
        statusbar_fields = ["", ""]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.toolbar.Realize()
        self.text_ctrl_Category.SetSize((120, 22))
        self.text_ctrl_Category.SetToolTipString("Select a category")
        self.text_ctrl_PN.SetSize((200, 22))
        self.text_ctrl_PN.SetToolTipString("Enter the Package Name")
        self.text_ctrl_PVR.SetSize((120, 22))
        self.text_ctrl_PVR.SetToolTipString("Enter the Package Version")
        self.radio_box_env.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wxBoxSizer(wxVERTICAL)
        sizer_2 = wxBoxSizer(wxVERTICAL)
        sizer_13 = wxBoxSizer(wxVERTICAL)
        sizer_14 = wxBoxSizer(wxHORIZONTAL)
        sizer_9 = wxBoxSizer(wxHORIZONTAL)
        sizer_11 = wxBoxSizer(wxVERTICAL)
        sizer_12 = wxBoxSizer(wxHORIZONTAL)
        sizer_10 = wxBoxSizer(wxHORIZONTAL)
        sizer_4 = wxBoxSizer(wxVERTICAL)
        sizer_3 = wxBoxSizer(wxHORIZONTAL)
        sizer_5 = wxBoxSizer(wxHORIZONTAL)
        sizer_7 = wxBoxSizer(wxHORIZONTAL)
        sizer_6 = wxBoxSizer(wxHORIZONTAL)
        sizer_8 = wxBoxSizer(wxHORIZONTAL)
        sizer_1.Add(self.static_line_2, 0, wxEXPAND, 0)
        sizer_8.Add(self.button_Category, 0, wxRIGHT, 10)
        sizer_8.Add(self.text_ctrl_Category, 0, 0, 0)
        sizer_5.Add(sizer_8, 1, wxEXPAND, 0)
        sizer_6.Add(self.label_PN, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 10)
        sizer_6.Add(self.text_ctrl_PN, 0, 0, 0)
        sizer_5.Add(sizer_6, 1, wxEXPAND, 0)
        sizer_7.Add(self.label_PVR, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 10)
        sizer_7.Add(self.text_ctrl_PVR, 0, 0, 0)
        sizer_5.Add(sizer_7, 1, wxEXPAND, 0)
        sizer_3.Add(sizer_5, 1, wxALL, 6)
        self.panel_1_copy.SetAutoLayout(1)
        self.panel_1_copy.SetSizer(sizer_3)
        sizer_3.Fit(self.panel_1_copy)
        sizer_3.SetSizeHints(self.panel_1_copy)
        sizer_2.Add(self.panel_1_copy, 0, wxEXPAND, 0)
        sizer_2.Add(self.static_line_3, 0, wxEXPAND, 0)
        sizer_4.Add(self.text_ctrl_log, 1, wxEXPAND, 0)
        self.panel_log.SetAutoLayout(1)
        self.panel_log.SetSizer(sizer_4)
        sizer_4.Fit(self.panel_log)
        sizer_4.SetSizeHints(self.panel_log)
        sizer_10.Add(self.tree_ctrl_1, 1, wxEXPAND, 0)
        self.window_1_pane_1.SetAutoLayout(1)
        self.window_1_pane_1.SetSizer(sizer_10)
        sizer_10.Fit(self.window_1_pane_1)
        sizer_10.SetSizeHints(self.window_1_pane_1)
        sizer_11.Add(self.explorer, 1, wxEXPAND, 0)
        sizer_12.Add(self.button_view, 0, wxLEFT, 8)
        sizer_12.Add(self.button_edit, 0, wxLEFT, 8)
        sizer_12.Add(self.button_patch, 0, wxLEFT, 8)
        sizer_12.Add(self.button_delete, 0, wxLEFT, 8)
        sizer_11.Add(sizer_12, 0, wxEXPAND, 0)
        self.window_1_pane_2.SetAutoLayout(1)
        self.window_1_pane_2.SetSizer(sizer_11)
        sizer_11.Fit(self.window_1_pane_2)
        sizer_11.SetSizeHints(self.window_1_pane_2)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 272)
        sizer_9.Add(self.window_1, 1, wxEXPAND, 0)
        self.panel_explorer.SetAutoLayout(1)
        self.panel_explorer.SetSizer(sizer_9)
        sizer_9.Fit(self.panel_explorer)
        sizer_9.SetSizeHints(self.panel_explorer)
        sizer_13.Add(self.text_ctrl_environment, 1, wxEXPAND, 0)
        sizer_14.Add(self.button_env_refresh, 0, wxALL, 10)
        sizer_14.Add(self.radio_box_env, 0, wxBOTTOM, 12)
        sizer_13.Add(sizer_14, 0, wxEXPAND, 0)
        self.panel_environment.SetAutoLayout(1)
        self.panel_environment.SetSizer(sizer_13)
        sizer_13.Fit(self.panel_environment)
        sizer_13.SetSizeHints(self.panel_environment)
        self.notebook_1.AddPage(self.panel_log, "Log")
        self.notebook_1.AddPage(self.panel_explorer, "Explorer")
        self.notebook_1.AddPage(self.panel_environment, "Environment")
        self.splitter.SplitHorizontally(self.STCeditor, self.notebook_1, 310)
        sizer_2.Add(self.splitter, 1, wxEXPAND, 0)
        self.panel_1.SetAutoLayout(1)
        self.panel_1.SetSizer(sizer_2)
        sizer_2.Fit(self.panel_1)
        sizer_2.SetSizeHints(self.panel_1)
        sizer_1.Add(self.panel_1, 1, wxEXPAND, 0)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade


        if os.getuid() != 0:
            utils.MyMessage(self, "You must be root, or running Abeni with 'sudo'.",\
                           "You must be root.", "error")
            sys.exit(1)

        EVT_TREE_SEL_CHANGED(self, treeID, self.OnTreeActivate)
        EVT_TREE_SEL_CHANGED(self, self.explorer.GetTreeCtrl().GetId(), self.OnFileSelect)

        EVT_BUTTON(self, self.button_env_refresh.GetId(), self.ViewEnvironment)
        EVT_BUTTON(self, self.button_view.GetId(), self.OnViewButton)
        EVT_BUTTON(self, self.button_edit.GetId(), self.OnEditButton)
        EVT_BUTTON(self, self.button_patch.GetId(), self.OnPatchButton)
        EVT_BUTTON(self, self.button_delete.GetId(), self.OnDeleteButton)
        EVT_BUTTON(self, self.button_Category.GetId(), self.OnCatButton)
        EVT_TOOL(self, newID, self.OnMnuNew)
        EVT_TOOL(self, openID, self.OnMnuLoad)
        EVT_TOOL(self, openOvlID, self.OnMnuLoadFromOverlay)
        EVT_TOOL(self, saveID, self.OnMnuSave)
        EVT_TOOL(self, editID, self.OnMnuEdit)

        #Insert
        EVT_TOOL(self, newFuncID, self.OnMnuNewFunction)
        EVT_TOOL(self, mnuLicenseID, self.InsertLicense)

        #Tools

        EVT_TOOL(self, toolCleanID, self.OnMnuClean)
        EVT_TOOL(self, digestID, self.OnMnuCreateDigest)
        EVT_TOOL(self, unpackID, self.OnToolbarUnpack)
        EVT_TOOL(self, compileID, self.OnToolbarCompile)
        EVT_TOOL(self, installID, self.OnToolbarInstall)
        EVT_TOOL(self, qmergeID, self.OnToolbarQmerge)
        EVT_TOOL(self, ebuildID, self.OnMnuEbuild)
        EVT_TOOL(self, emergeID, self.OnMnuEmerge)
        EVT_TOOL(self, xtermID, self.OnXtermInS)
        EVT_TOOL(self, self.StopID, self.KillProc)
        EVT_TOOL(self, mnuAddFuncID, self.OnMnuNewFunction)

        # File

        EVT_MENU_RANGE(self, wxID_FILE1, wxID_FILE9, self.OnFileHistory)
        EVT_MENU(self, mnuNewID, self.OnMnuNew)
        EVT_MENU(self, mnuLoadID, self.OnMnuLoad)
        EVT_MENU(self, mnuLoadOverlayID, self.OnMnuLoadFromOverlay)
        EVT_MENU(self, mnuSaveID, self.OnMnuSave)
        EVT_MENU(self, mnuDelID, self.OnMnuDeleteEbuild)
        EVT_MENU(self, mnuExportID, self.OnMnuExportEbuild)
        EVT_MENU(self, exitID, self.OnMnuExit)
        EVT_MENU(self, mnuFindID, self.OnHelpFind)
        EVT_MENU(self, mnuFindAgainID, self.OnFindNext)
        EVT_COMMAND_FIND(self, -1, self.OnFind)
        EVT_COMMAND_FIND_NEXT(self, -1, self.OnFind)
        EVT_COMMAND_FIND_CLOSE(self, -1, self.OnFindClose)

        #Tools:

        EVT_MENU(self, mnuCleanID, self.OnMnuClean)
        EVT_MENU(self, mnuDigestID, self.OnMnuCreateDigest)
        EVT_MENU(self, mnuUnpackID, self.OnToolbarUnpack)
        EVT_MENU(self, mnuCompileID, self.OnToolbarCompile)
        EVT_MENU(self, mnuInstallID, self.OnToolbarInstall)
        EVT_MENU(self, mnuEbuildID, self.OnMnuEbuild)
        EVT_MENU(self, mnuEmergeID, self.OnMnuEmerge)
        EVT_MENU(self, mnuRepoScanID, self.OnMnuRepomanScan)
        EVT_MENU(self, mnuPatchID, self.OnMnuMakePatch)
        EVT_MENU(self, mnuImportID, self.OnMnuImportPatch)
        EVT_MENU(self, mnuDiffID, self.OnMnuDiff)
        EVT_MENU(self, mnuRepoFullID, self.OnMnuRepomanFull)
        EVT_MENU(self, mnuFileCopyID, self.OnMnuFileCopy)
        EVT_MENU(self, mnuXtermSID, self.OnXtermInS)
        EVT_MENU(self, mnuXtermDID, self.OnXtermInD)
        EVT_MENU(self, mnuXtermCVSID, self.OnXtermInCVS)
        EVT_MENU(self, mnuViewMetadataID, self.OnMnuViewMetadata)
        EVT_MENU(self, mnuViewChangeLogID, self.OnMnuViewChangeLog)
        EVT_MENU(self, mnuEditID, self.OnMnuEdit)

        # repoman CVS commit
        EVT_MENU(self, self.mnuFullCommitID, self.OnMnuFullCommit)

        # Log:
        EVT_MENU(self, mnuClearLogID, self.OnMnuClearLog)

        # Options:
        EVT_MENU(self, mnuPrefID, self.OnMnuPref)

        # Help:
        EVT_MENU(self, mnuHelpID, self.OnMnuHelp)
        EVT_MENU(self, mnuHelpRefID, self.OnMnuHelpRef)
        EVT_MENU(self, mnuEclassID, self.OnMnuEclassHelp)
        EVT_MENU(self, mnuPrivID, self.OnMnuPrivHelp)
        EVT_MENU(self, mnuUseID, self.OnMnuUseHelp)
        EVT_MENU(self, mnulocalUseID, self.OnMnuLocalUseHelp)
        EVT_MENU(self, mnuFKEYS_ID, self.OnMnuHelpFkeys)
        EVT_MENU(self, mnuCVS_ID, self.OnMnuHelpCVS)
        EVT_MENU(self, mnuAboutID, self.OnMnuAbout)

        EVT_RADIOBOX(self, self.radio_box_env.GetId(), self.EvtRadioBox)

        EVT_CLOSE(self, self.OnClose)
        EVT_END_PROCESS(self, -1, self.OnProcessEnded)
        #EVT_IDLE(self, self.OnIdle)
        self.process = None

    	self.toolbar.EnableTool(self.StopID, False)

        # Explorer tree:
        self.root = self.tree_ctrl_1.AddRoot(" ")
        self.tree_ctrl_1.SetPyData(self.root, None)
        self.tree_ctrl_1.AppendItem(self.root, "$FILESDIR")
        self.tree_ctrl_1.AppendItem(self.root, "$S")
        self.tree_ctrl_1.AppendItem(self.root, "$D")
        self.tree_ctrl_1.AppendItem(self.root, "CVS/category/PN")
        self.tree_ctrl_1.Expand(self.root)
        self.tree_ctrl_1.Expand(self.root)
        self.window_1_pane_2.Hide()

        #TODO: Add option to save current screen size when exiting
        #screenWidth =  wx.wxSystemSettings_GetSystemMetric(wx.wxSYS_SCREEN_X)
        #screenHeight = wx.wxSystemSettings_GetSystemMetric(wx.wxSYS_SCREEN_Y)
        #Prevent splitter windows from becoming un-split
        self.splitter.SetMinimumPaneSize(20)
        #SashPosition(230)
        #SashPosition(370)
        self.window_1.SetMinimumPaneSize(20)

        # Are we in the process of editing an ebuild?
        self.editing = 0

        #Load recently accessed ebuilds
        abeniDir = os.path.expanduser('~/.abeni')
        bookmarks = '%s/recent.txt' % abeniDir
        if os.path.exists(bookmarks):
            self.recentList = open(bookmarks, 'r').readlines()
        else:
            self.recentList = []
        self.filehistory = wxFileHistory(9)
        self.filehistory.UseMenu(self.fileMenu)
        self.recentList.sort()
        for ebuild in self.recentList:
            e = ebuild.strip()
            if os.path.exists(e):
                self.filehistory.AddFileToHistory(e) 

        #set to 1 to also send to stdout, not just log window
        self.stdout = 0
        #brief mode for viewing environment:
        self.envView=0
        # Get options from ~/.abeni/abenirc file
        utils.GetOptions(self)
        if self.pref['logfile'] == 1:
            self.logfile = open(self.pref['logFilename'], 'a')
        else:
            self.logfile = None

        # ${S}
        self.s = ''
        # Ebuild's path and filename
        self.filename = ''
        # Saved state
        self.saved = 1
        # Tells if an external command is running, like emerge, ebuild etc.
        self.running = None
        # Action performed during external commands
        self.action = None
        self.STCeditor.Hide()
        wxLog_SetActiveTarget(MyLog(self.text_ctrl_log))
        utils.write(self, "))) PORTDIR_OVERLAY=%s\n\n\n" % portdir_overlay)
        if not self.pref['editor']:
            utils.write(self,"!!! Please set your external editor under the Options menu")
            utils.write(self," *  If you use gvim you will need to use '/usr/bin/gvim -f'")
        #EVT_MENU_RANGE(self, wxID_FILE1, wxID_FILE9, self.OnFileHistory)

        self.SetTitle("Abeni - The ebuild Builder " + __version__.version)
        self.finddata = wxFindReplaceData()
        self.ExternalControlListen()
        self.ApplyPrefs()
        self.menubar.Enable(self.mnuFullCommitID, False)
        #Load ebuild if specified on command line, by filename or by
        ## full package name
        if len(sys.argv) == 2:
            f = sys.argv[1]
            print "Checking for package: %s" % f
            #Draw GUI before we start the slow search
            utils.LoadByPackage(self, f)

    def OnMnuExportEbuild(self, event):
        """Export ebuild and auxiliary files as tarball"""
        if not self.editing:
            return
        utils.ExportEbuild(self)

    def InsertLicense(self, evt):
        """Choose license(s) overwrite any existing license(s)"""
        if not self.editing:
            return
        c = os.listdir('%s/licenses' % portdir)
        def strp(s): return s.strip()
        c = map(strp, c)
        c = filter(None, c)
        c.sort()
        dlg = wxMultipleChoiceDialog(self, 'Choose one or more:\n(This replaces any existing)', 'License', c)
        if dlg.ShowModal() == wxID_OK:
            opt = dlg.GetValueString()
            l = ""
            if len(opt) == 1:
                l = '%s' % opt[0].strip()
                self.FindReplace("LICENSE", 'LICENSE="%s"' % l.strip())
            else:
                for s in opt:
                    l = ('%s | %s' % (l, s.strip()))
                    self.FindReplace("LICENSE", 'LICENSE="%s"' % l[2:].strip())

    def OnFileSelect(self, evt):
        #t = self.explorer.GetTreeCtrl().GetItemText(evt.GetItem())
        t = self.explorer.GetPath()
        self.statusbar.SetStatusText(t, 0)

    def OnHelpFind(self, event):
        self.finddlg = wxFindReplaceDialog(self, self.finddata, "Find")
        self.finddlg.Show(True)

    def OnFind(self, event):
        end = self.STCeditor.GetLength()
        textstring = self.STCeditor.GetTextRange(0, end).lower()
        start = self.STCeditor.GetSelection()[1]
        findstring = self.finddata.GetFindString().lower()
        loc = textstring.find(findstring, start)
        if loc == -1 and start != 0:
            # string not found, start at beginning
            start = 0
            loc = textstring.find(findstring, start)
        if loc == -1:
            dlg = wxMessageDialog(self, 'Find String Not Found',
                          'String Not Found',
                          wxOK | wxICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
        if self.finddlg:
            if loc == -1:
                self.finddlg.SetFocus()
                return
            else:
                self.finddlg.Destroy()
        self.STCeditor.GotoPos(loc)
        self.STCeditor.SetSelection(loc, loc + len(findstring))

    def OnFindNext(self, event):
        if self.finddata.GetFindString():
            self.OnFind(event)
        else:
            self.OnHelpFind(event)

    def OnFindClose(self, event):
        event.GetDialog().Destroy()

    def EvtRadioBox(self, event):
        """set either full or brief mode for enviornment tab"""
        self.envView = event.GetInt()

    def OnMnuNewFunction(self, event):
        """Dialog to add new function"""
        if not self.editing:
            return
        dlg = AddFunctionDialog.AddFunction(self)
        dlg.CenterOnScreen()
        v = dlg.ShowModal()
        if v == wxID_OK:
            func, val = dlg.GetFunc()
            self.STCeditor.AddText(val)
        #self.STCeditor.SetCursor(wxSTC_CURSORNORMAL)
        #self.saved = 0
        dlg.Destroy()

    def OnViewButton(self, evt):
        """View file in explorer"""
        f = self.explorer.GetPath()
        if not os.path.isfile(f):
            return
        self.ViewFile(f)
    
    def OnEditButton(self, evt):
        """Edit file in external editor"""
        f = self.explorer.GetPath()
        if not os.path.isfile(f):
            return
        self.EditFile(f)

    def OnPatchButton(self, evt):
        """patch file in ${S}, copy to ${FILESDIR}"""
        f = self.explorer.GetPath()
        if not os.path.isfile(f):
            return
        self.CreatePatch([f])

    def OnDeleteButton(self, evt):
        """delete file in explorer"""
        f = self.explorer.GetPath()
        if not os.path.isfile(f):
            return
        dlg = wxMessageDialog(self, 'DELETE this file?\n' + f,
                'DELETE file?', wxYES_NO | wxICON_INFORMATION)
        val = dlg.ShowModal()
        if val == wxID_YES:
            os.unlink(f)
        self.SetExplorer(self.branch)
        itemId = self.explorer.GetTreeCtrl().GetSelection()
        self.explorer.GetTreeCtrl().CollapseAndReset(itemId)
        self.explorer.GetTreeCtrl().Expand(itemId)

    def OnTreeActivate(self, evt):
        """Get tree selection ($S, $D, etc) and show filesystem"""
        self.treeItem = evt.GetItem()   
        self.branch = self.tree_ctrl_1.GetItemText(self.treeItem) 
        self.SetExplorer(self.branch)

    def RefreshExplorer(self):
        """Refresh the file explorer"""
        self.SetExplorer("/") 
        itemId = self.explorer.GetTreeCtrl().GetSelection()
        self.explorer.GetTreeCtrl().CollapseAndReset(itemId)
        self.explorer.GetTreeCtrl().Expand(itemId)
        try:
            self.SetExplorer(self.branch)
            itemId = self.explorer.GetTreeCtrl().GetSelection()
            self.explorer.GetTreeCtrl().CollapseAndReset(itemId)
            self.explorer.GetTreeCtrl().Expand(itemId)
        except:
            #ctrl hasn't been clicked on yet
            pass

    def SetExplorer(self, txt):
        if not self.window_1_pane_2.IsShown():
            self.window_1_pane_2.Show()
        if txt == "$FILESDIR":
            f = utils.GetFilesDir(self)
            if os.path.exists(f):
                self.button_view.Enable(True)
                self.button_edit.Enable(True)
                self.button_patch.Enable(False)
                self.button_delete.Enable(True)
                self.explorer.ExpandPath(f)
            else:
                self.window_1_pane_2.Hide()
        if txt == "$S":
            f = utils.GetS(self)
            if f:
                self.explorer.ExpandPath(f)
                self.button_view.Enable(True)
                self.button_edit.Enable(True)
                self.button_patch.Enable(True)
                self.button_delete.Enable(True)
            else:
                self.window_1_pane_2.Hide()
        if txt == "$D":
            f = utils.GetD(self)
            if f:
                self.button_view.Enable(True)
                self.button_edit.Enable(False)
                self.button_patch.Enable(False)
                self.button_delete.Enable(False)
                self.explorer.ExpandPath(f)
            else:
                self.window_1_pane_2.Hide()

        if txt == "CVS/category/PN":
            cvs = self.GetCVScatPN()
            if cvs:
                self.explorer.ExpandPath(cvs)
                self.button_view.Enable(True)
                self.button_edit.Enable(True)
                self.button_patch.Enable(False)
                self.button_delete.Enable(True)
            else:
                self.window_1_pane_2.Hide()

    def OnCatButton(self, event):
        """Choose ebuild category"""
        c = open('%s/profiles/categories' % portdir).readlines()
        def strp(s): return s.strip()
        c = map(strp, c)
        c = filter(None, c)
        if os.path.exists("/etc/portage/categories"):
            d = open("/etc/portage/categories")
            d = map(strp, d)
            d = filter(None, d)
            c += d
        c.sort()
        dlg = wxSingleChoiceDialog(self, 'Category', 'Category:',
                                   c, wxOK|wxCANCEL)
        if dlg.ShowModal() == wxID_OK:
            opt = dlg.GetStringSelection()
            #Mark all games stable: Bugzilla #25708
            self.text_ctrl_Category.SetValue(opt)
            if opt == 'app-games':
                pass
                #self.Keywords.SetValue(self.Keywords.GetValue().replace('~', ''))

    def OnTimer(self, evt):
        """Call idle handler every second to update log window"""
        self.HandleIdle()

    def OnIdle(self, event):
        """Called after the GUI stops being idle (mouse or key events)"""
        self.HandleIdle()

    def HandleIdle(self):
        if self.process is not None:
            stream = self.process.GetInputStream()
            if stream.CanRead():
                t = stream.readline()
                utils.write(self, t)

    def OnFileHistory(self, event):
        """Load ebuild on FileHistory event"""
        # get the file based on the menu ID
        fileNum = event.GetId() - wxID_FILE1
        path = self.filehistory.GetHistoryFile(fileNum)
        if not utils.VerifySaved(self):
            utils.Reset(self)
            utils.LoadEbuild(self, path)
            # add it back to the history so it will be moved up the list
            self.filehistory.AddFileToHistory(path)

    def OnMnuLoad(self, event):
        """Load ebuild file"""
        if not utils.VerifySaved(self):
            wildcard = "ebuild files (*.ebuild)|*.ebuild"
            dlg = wxFileDialog(self, "Choose a file", portdir, "", \
                                wildcard, wxOPEN)
            if dlg.ShowModal() == wxID_OK:
                filename = dlg.GetPath()
                utils.Reset(self)
                utils.LoadEbuild(self, filename)
                self.filehistory.AddFileToHistory(filename)
            dlg.Destroy()

    def __del__(self):
        if self.process is not None:
            self.process.Detach()
            self.process.CloseOutput()
            self.process = None

    def OnMnuHelpRef(self, event):
        """Display html help file"""
        self.LaunchBrowser("http://abeni.sf.net/docs/ebuild-quick-reference.html")

    def LaunchBrowser(self, url):
        """launch web browser"""
        if self.pref['userName']:
            if self.pref['browser']:
                os.system("xhost + localhost")
                cmd = self.pref['browser'] + " " + url + " &"
                os.system("su %s %s" % (self.pref['userName'], cmd))
            else:
                utils.MyMessage(self, "You need to define a browser in preferences.", \
                  "Error", "error")
        else:
            utils.MyMessage(self, "You need to set your username to run your web browser as, under Developer preferences.", \
              "Error", "error")

    def OnMnuHelp(self, event):
        """Display html help file"""
        self.LaunchBrowser("http://abeni.sf.net/docs/index.html")

    def OnMnuDeleteEbuild(self, event):
        """Delete ebuild from disk in overlay"""
        if not self.editing:
            return

        if portdir in self.filename:
            msg = "Ebuild isn't saved in PORTDIR_OVERLAY. Can't delete."
            utils.MyMessage(self, msg, "Error", "error")
            return

        dlg = wxMessageDialog(self, 'DELETE this ebuild from PORTDIR_OVERLAY?\n' + self.filename,
                'DELETE ebuild?', wxYES_NO | wxICON_INFORMATION)
        val = dlg.ShowModal()
        if val == wxID_YES:
            utils.DeleteEbuild(self)
            utils.Reset(self)
            self.saved = 1
            self.STCeditor.SetSavePoint() 

    def OnMnuSave(self, event):
        """Save ebuild file to disk"""
        if not self.STCeditor.IsShown():
            #utils.write(self, "!!! Error - Check Category, PN, PVR")
            return
        utils.SaveEbuild(self)

    def getname(self, uri):
        """get ebuild name from src_uri"""
        path = urlparse.urlparse(uri)[2]
        path = string.split(path, '/')
        file = self.stripext(path[len(path)-1])
        return file

    def stripext(self, file):
        file = string.replace(file, ".zip", "")
        file = string.replace(file, ".tgz", "")
        file = string.replace(file, ".tar.gz", "")
        file = string.replace(file, ".tar.bz2", "")
        file = string.replace(file, ".tbz2", "")
        return file

    def FindReplace(self, target, replace):
        """Replace line containing text in STCeditor. return length of str replaced if found"""
        #Note: If we replace string with "" this will return 0
        #so don't use the length to determine if we matched anything
        s = self.STCeditor.FindText(0, self.LastPos(), '^%s' % target, wxSTC_FIND_REGEXP)
        e = self.STCeditor.GetLineEndPosition(self.STCeditor.LineFromPosition(s))
        if s != -1:
            self.STCeditor.SetTargetStart(s)
            self.STCeditor.SetTargetEnd(e)
            return self.STCeditor.ReplaceTarget(replace)
        else:
            return -1

    def OnMnuNew(self,event):
        """Creates a new ebuild from scratch"""
        if not utils.VerifySaved(self):
            win = GetURIDialog.GetURIDialog(self, -1, "Enter Package URI", \
                                       size=wxSize(350, 200), \
                                       style = wxDEFAULT_DIALOG_STYLE \
                                       )
            win.CenterOnScreen()
            val = win.ShowModal()
            uri = win.URI.GetValue()
            template = win.GetTemplate()
            n = ''
            if uri.find('sourceforge') != -1:
                a = urlparse.urlparse(uri)
                if a[2].find('sourceforge') != -1:
                    uri = 'mirror:/%s' % a[2]
                    #This is in case we want to automatically set the 
                    #SourceForge homepage:self.panelMain.Homepage.SetValue(
                    #'"http://sourceforge.net/projects/%s"' % \
                    #utils.GetPN(self).lower())
            if val == wxID_OK and uri:
                # foo-1.0.tgz
                p = self.getname(uri)
                if not p:
                    return
                n = pkgsplit(p)

                if n:
                    p = ("%s-%s" % (n[0], n[1]))
                    new_uri = uri.replace(p, "${P}")
                    uri_line = ("%s" % new_uri)
            utils.Reset(self) 
            if n:
                self.text_ctrl_PN.SetValue(n[0])
                self.text_ctrl_PVR.SetValue(n[1])
            #if self.pref['log'] == 'window':
            #    utils.LogWindow()
            # In case we edit SRC_URI and forget what the
            # original url is:
            if uri:
                utils.write(self, '))) SRC_URI="%s"' % uri)

            self.STCeditor.SetText(open("/usr/share/abeni/templates/%s" % template, 'r').read())
            self.STCeditor.EmptyUndoBuffer()
            self.STCeditor.SetSavePoint()
            self.STCeditor.Show()
            self.window_1_pane_2.Hide()
            self.editing = 1
            self.saved = 0
            if n:
                self.FindReplace("SRC_URI", 'SRC_URI="%s"' % uri_line)
            self.SetTitle("Abeni * The ebuild Builder " + __version__.version)

    def OnClose(self, event):
        """Called when trying to close application"""
        #TODO: Give yes/no quit dialog.
        if self.running:
            utils.write(self, "!!! You're executing %s" % self.running)
            return
        if not utils.VerifySaved(self):
            bookmarks = os.path.expanduser('~/.abeni/recent.txt')
            f = open(bookmarks, 'w')
            for e in range(self.filehistory.GetNoHistoryFiles()):
                f.write(self.filehistory.GetHistoryFile(e) + '\n')
            f.close()
            self.Destroy()

    def OnMnuExit(self,event):
        """Exits and closes application"""
        self.OnClose(-1)

    def ViewFile(self, f):
        """View file in dialog"""
        msg = open(f, "r").read()
        dlg = wxScrolledMessageDialog(self, msg, f)
        dlg.Show(True)

    def OnMnuUseHelp(self, event):
        """View PORTDIR/profiles/use.desc file"""
        f = "%s/profiles/use.desc" % portdir
        msg = open(f, "r").read()
        dlg = wxScrolledMessageDialog(self, msg, "USE descriptions")
        dlg.Show(True)

    def OnMnuLocalUseHelp(self, event):
        """View PORTDIR/profiles/use.local.desc file"""
        f = "%s/profiles/use.local.desc" % portdir
        msg = open(f, "r").read()
        dlg = wxScrolledMessageDialog(self, msg, "local USE descriptions")
        dlg.Show(True)

    def OnMnuCreateDigest(self, event):
        """Run 'ebuild filename digest' on this ebuild"""
        if not self.editing:
            return

        if not utils.IsOverlay(self, self.filename):
            utils.MyMessage(self, "You need to save the ebuild first.", "error")
            return 0

        if not utils.VerifySaved(self):
            self.action = "digest"
            logMsg = '))) Creating digest...'
            cmd = 'FEATURES="%s" USE="%s" /usr/sbin/ebuild %s digest' % (self.pref['features'], self.pref['use'], self.filename)

            utils.ExecuteInLog(self, cmd, logMsg)


    def OnToolbarCompile(self, event):
        """ebuild <this ebuild> compile"""
        if self.editing:
            if not utils.IsOverlay(self, self.filename):
                utils.MyMessage(self, "You need to save the ebuild first.", "error")
                return 0
            if not utils.VerifySaved(self):
                self.action = "compile"
                logMsg = '))) Compiling...'
                cmd = 'FEATURES="%s" USE="%s" /usr/sbin/ebuild %s compile' % \
                    (self.pref['features'], self.pref['use'], self.filename)
                utils.ExecuteInLog(self, cmd, logMsg)

    def OnMnuClean(self, event):
        """Run 'ebuild filename clean' on this ebuild"""
        if not self.editing:
            return
        logMsg = '))) Cleaning...'
        self.action = "clean"
        cmd = 'FEATURES="%s" USE="%s" /usr/sbin/ebuild %s clean' % \
              (self.pref['features'], self.pref['use'], self.filename)
        utils.ExecuteInLog(self, cmd, logMsg)

    def OnToolbarEdit(self, event):
        """Edit this ebuild in external editor"""
        self.OnMnuEdit()

    def OnToolbarUnpack(self, event): 
        """ebuild <this ebuild> unpack"""
        if self.editing:
            if not utils.IsOverlay(self, self.filename):
                utils.MyMessage(self, "You need to save the ebuild first.", "error")
                return 0
            if not utils.VerifySaved(self):
                self.action = 'unpack'
                logMsg = '))) Unpacking...'
                cmd = 'FEATURES="%s" USE="%s" /usr/sbin/ebuild %s unpack' % \
                    (self.pref['features'], self.pref['use'], self.filename)
                utils.ExecuteInLog(self, cmd, logMsg)

    def OnToolbarInstall(self, event):
        """ebuild <this ebuild> Install"""
        if self.editing:
            if not utils.IsOverlay(self, self.filename):
                utils.MyMessage(self, "You need to save the ebuild first.", "error")
                return 0

            if not utils.VerifySaved(self):
                self.action = 'install'
                logMsg = '))) Installing...'
                cmd = 'FEATURES="%s" USE="%s" /usr/sbin/ebuild %s install' % \
                    (self.pref['features'], self.pref['use'], self.filename)
                utils.ExecuteInLog(self, cmd, logMsg)

    def OnToolbarQmerge(self, event):
        """ebuild <this ebuild> qmerge"""
        if self.editing:
            if not utils.IsOverlay(self, self.filename):
                utils.MyMessage(self, "You need to save the ebuild first.", "error")
                return 0

            if not utils.VerifySaved(self):
                self.action = 'qmerge'
                logMsg = '))) Qmerging...'
                cmd = 'FEATURES="%s" USE="%s" /usr/sbin/ebuild %s qmerge' % \
                    (self.pref['features'], self.pref['use'], self.filename)
                utils.write(self, cmd)
                utils.ExecuteInLog(self, cmd, logMsg)

    def OnMnuImportPatch(self, event):
        """Import an existing patch"""
        if not self.editing:
            return
        if not utils.IsOverlay(self, self.filename):
            utils.MyMessage(self, "You need to save the ebuild first.", "error")
            return 0

        f = utils.GetFilesDir(self)
        dlg = wxFileDialog(self, "Choose a file", "/var/tmp/abeni/", "", "*", wxOPEN)

        if dlg.ShowModal() == wxID_OK:
            orig = dlg.GetPaths()
        else:
            return

        base = os.path.basename(orig[0])
        dest = "%s/%s" % (f, base)
        shutil.copy(orig[0], dest)

        epatch = "epatch ${FILESDIR}/%s" % base
        self.SrcUnpackEpatch(epatch)

    def OnMnuMakePatch(self, event):
        """Create a patch from something in ${S}"""
        if not self.editing:
            return
        if not utils.IsOverlay(self, self.filename):
            utils.MyMessage(self, "You need to save the ebuild first.", "error")
            return 0

        if not utils.CheckUnpacked(self):
            msg = 'You need to unpack first'
            title = 'Error'
            utils.MyMessage(self, msg, title, "error")
            return
        self.CreatePatch()

    def CreatePatch(self, orig=[]):
        """Creates patch from given file or selected from dialog"""
        #TODO: Make function for this:
        if not self.pref['editor']:
            utils.MyMessage(self, "No editor defined in perferences", \
              "Error: no editor defined", "error")
            return

        if not orig:
            s = utils.GetS(self)
            #wxYield()
            dlg = wxFileDialog(self, "Choose a file", s, "", "*", wxOPEN)

            if dlg.ShowModal() == wxID_OK:
                orig = dlg.GetPaths()
            else:
                return
        f = utils.GetFilesDir(self)
        #copy file to /var/tmp
        tmpdir = "/var/tmp/abeni"
        tmp_patch = "%s/%s" % (tmpdir, "tmp_patch")
        if not os.path.exists(tmpdir):
            os.mkdir(tmpdir)
        base = os.path.basename(orig[0])
        shutil.copy(orig[0], tmpdir)
        out = os.path.join(tmpdir, base)
        os.system('%s %s' % (self.pref['editor'], out))
        os.system("diff -u %s %s > %s" % (orig[0], out, tmp_patch))

        dlg = wxTextEntryDialog(self, 'Choose name for your patch:',
                            'Choose patch name', '')
        dlg.SetValue('choose_a_name.patch')
        if dlg.ShowModal() == wxID_OK:
            pname = dlg.GetValue()
        else:
            return

        dest = "%s/%s" % (f, pname)
        shutil.copy(tmp_patch, dest)

        #insert inheirt eutils:
        p = self.STCeditor.FindText(0, self.LastPos(), "^inherit", wxSTC_FIND_REGEXP)
        if p != -1:
            #already have inherit line, check if has eutils 
            pe = self.STCeditor.FindText(p, p+80, "eutils", wxSTC_FIND_REGEXP)
            if pe == -1:
                #already have eutils inheritted
                self.STCeditor.InsertText(p + 8, "eutils ")
                utils.write(self, "))) Added 'eutils' to inherit in order to use epatch")
        else:
            #find first blank line
            b = self.STCeditor.GetLineEndPosition(2)
            self.STCeditor.InsertText(b+1, "\ninherit eutils\n")
            utils.write(self, "))) Added 'inherit eutils' in order to use epatch")
        epatch = "epatch ${FILESDIR}/%s" % pname

        self.SrcUnpackEpatch(epatch)

    def SrcUnpackEpatch(self, epatch):        
        #insert src_unpack with epatch    
        
        p = self.STCeditor.FindText(0, self.LastPos(), "src_unpack")
        if p == -1:
            n = self.LastPos()
            unpck = '''src_unpack() {\n\tunpack ${A} || die "Failed to unpack ${A}"\n\tcd ${S} || die "Failed to cd ${S}"\n\t%s\n\n}''' % epatch
            self.STCeditor.InsertText(n, "\n\n%s\n" % unpck)
            utils.write(self, "))) Added src_unpack() with epatch line")
        else:
            #have existing src_unpack, add epatch line
            #TODO: use regex
            #TODO: Make function to return first and last pos of given function
            p = self.STCeditor.FindText(0, self.LastPos(), "src_unpack")
            lp = self.STCeditor.FindText(p, self.LastPos(), "^}", wxSTC_FIND_REGEXP)
            if lp != -1:
                self.STCeditor.InsertText(lp, "\n\t%s\n" % epatch)
                utils.write(self, "))) Inserted 'epatch' line in src_unpack()")

    def LastPos(self):
        """Return last position in editor"""
        return self.STCeditor.GetLineEndPosition(self.STCeditor.GetLineCount())
    

    def OnMnuRepomanScan(self, event):
        """repoman scan"""
        if not self.editing:
            return
    
        if '@gentoo.org' in  self.pref['email']:
            cvs = CVS(self)
            cvs.RepomanScan("scan")
        else:
            #utils.NotGentooDev()
            cvs.RepomanScan("--pretend scan")

    def OnMnuFullCommit(self, event):
        """Complete CVS repoman commit with scan, echangelog etc
            This will do the following:

                2)  If new package:
                      add directory

                4) If not new package:
                     cvs update (package directory)
                     show output in log window, if anything wrong such as ebuild
                     existing, abort

                5)  Copy ebuild from PORTDIR_OVERLAY to CVS_DIR

                6)  cvs add ebuild

                7)  Prompt user to copy any files from FILES_DIR to CVS_DIR/FILES

                8)  cvs add anything new in CVS_DIR/FILES

                9)  Create digest for ebuild (should auto-add to cvs)

                10) echangelog dialog

                11) Show dialog with metadata.xml in case they need to change it
                    or create it

                12) If new package:
                      cvs add metadta.xml
                      cvs add ChangeLog

                13) Get commit message (could be same as echangelog msg)

                14) repoman full in CVS_DIR

                15) repoman --pretend commit -m "commit message"

                16) show diaglog (y/N): repoman commit -m "commit message"
                """

        if self.editing:
            self.stdout = 1
            cvs = abeniCVS.CVS(self)
            cvs.FullCommit()
            self.stdout = 0

    def OnMnuCVSupdate(self, event):
        """/usr/bin/cvs update"""
        if self.editing:
            cvs = CVS(self)
            cvs.CVSupdate()

    def OnMnuCopyFile(self, event):
        """Copy ebuild to cvs dir"""
        #TODO: Prompt if ebuild changes or if over-writing
        if self.editing:
            cvs = CVS(self)
            cvs.CopyEbuild()

    def OnMnuCopyMetadata(self, event):
        """Copy metadata.xml to cvs dir"""
        #TODO: Prompt if ebuild changes or if over-writing
        if self.editing:
            cvs = CVS(self)
            cvs.CopyMetadata()

    def OnMnuCreateCVSDigest(self, event):
        """Create digest in CVS dir"""
        if self.editing:
            cvs = CVS(self)
            cvs.CreateDigest()

    def OnMnuCVSaddDir(self, event):
        if self.editing:
            cvs = CVS(self)
            cvs.AddDir()

    def OnMnuCVSaddEbuild(self, event):
        if self.editing:
            cvs = CVS(self)
            cvs.AddEbuild()

    def OnMnuCVSaddDigest(self, event):
        if self.editing:
            cvs = CVS(self)
            cvs.AddDigest()

    def OnMnuCVSaddChangeLog(self, event):
        if self.editing:
            cvs = CVS(self)
            cvs.AddChangelog()

    def OnMnuCVSaddMetadata(self, event):
        if self.editing:
            cvs = CVS(self)
            cvs.AddMetadata()

    def OnMnuMetadataEdit(self, event):
        if self.editing:
            dlg = MetadataDialog.MetadataDialog(self)
            dlg.CenterOnScreen()
            v = dlg.ShowModal()
            if v == wxID_OK:
                t = dlg.styledTextCtrl1.GetText()
                f = open(("%s/metadata.xml" % \
                  os.path.dirname(self.filename)), "w")
                f.write(t)
                f.close()

    def ViewEnvironment(self, event=None):
        """Show environment file in editor window"""
        if not self.editing:
            return
        utils.ViewEnvironment(self)

    def OnMnuViewMetadata(self, event):
        """View metadata.xml in dialog window"""
        if not self.editing:
            return

        p = utils.GetPortdirPathVersion(self)
        if p:
            f = '%s/metadata.xml' % p
            if os.path.exists(f):
                c = open(f, 'r').read()
                dlg = wxScrolledMessageDialog(self, c, "metadata.xml")
                dlg.Show(True)
            else:
                utils.MyMessage(self, "No metadata.xml exists in PORTDIR", "Error", "error")
        else:
            utils.MyMessage(self, "No metadata.xml exists in PORTDIR", "Error", "error")
 
    def OnMnuViewChangeLog(self, event):
        """View ChangeLog in dialog window"""
        if not self.editing:
            return

        p = utils.GetPortdirPathVersion(self)
        if p:
            f = '%s/ChangeLog' % p
            if os.path.exists(f):
                c = open(f, 'r').read()
                dlg = wxScrolledMessageDialog(self, c, "ChangeLog")
                dlg.Show(True)
            else:
                utils.MyMessage(self, "No ChangeLog exists in PORTDIR", "Error", "error")
        else:
            utils.MyMessage(self, "No ChangeLog exists in PORTDIR", "Error", "error")
             
    def OnMnuLoadFromOverlay(self, event):
        """Load an ebuild from list of overlay ebuilds only"""
        if not utils.VerifySaved(self):
            cmd = "find %s -name '*.ebuild'" % portdir_overlay
            r, choices = utils.RunExtProgram(cmd)
            choices.sort()
            out = []
            for l in choices:
                out.append(l.replace(('%s/' % portdir_overlay), ''))
            dlg = wxSingleChoiceDialog(self, 'Load overlay ebuild:', \
                                      'Load overlay ebuild', out, wxOK|wxCANCEL)
            if dlg.ShowModal() == wxID_OK:
                e = dlg.GetStringSelection()
                utils.Reset(self)
                filename = "%s/%s" % (portdir_overlay, e)
                if os.path.isfile(filename):
                    utils.LoadEbuild(self, filename)
                    self.filehistory.AddFileToHistory(filename)
            dlg.Destroy()

    def OnMnuPrivHelp(self, event):
        """View private portage fnunctions"""
        #win = PortageFuncsDialog.MyDialog(self, -1, "Preferences", \
        #                          size=wxSize(350, 200), \
        #                          style = wxDEFAULT_DIALOG_STYLE \
        #                          )
        win = PortageFuncsDialog.MyDialog(self, -1, "Portage Private Functions",
                                  style = wxDEFAULT_DIALOG_STYLE)
        win.CenterOnScreen()
        win.ShowModal()

    def OnMnuEclassHelp(self, event):
        """View an eclass file"""
        d = "%s/eclass/" % portdir
        c = os.listdir(d)
        c.sort()
        dlg = wxSingleChoiceDialog(self, 'View an Eclass', 'Eclass',
                                   c, wxOK|wxCANCEL)
        if dlg.ShowModal() == wxID_OK:
            opt = dlg.GetStringSelection()
            file = "%s/%s" % (d, opt)
            msg = open(file, "r").read()
            dlg.Destroy()
            dlg = wxScrolledMessageDialog(self, msg, opt)
            dlg.Show(True)
        else:
            dlg.Destroy()
            return

    def OnMnuDiff(self, event):
        """diff against original ebuild in PORTDIR"""
        if not self.editing:
            return

        cat = utils.GetCategoryName(self)
        pn = utils.getPN(self)
        ebuild = "%s.ebuild" % utils.getP(self)
        orig_ebuild = "%s/%s/%s/%s" % (portdir, cat, pn, ebuild)
        this_ebuild = utils.GetFilename(self)

        if not os.path.exists(orig_ebuild):
            utils.MyMessage(self, "No matching ebuild in PORTDIR found.", "Error", "error")
            return

        if orig_ebuild == this_ebuild:
            utils.MyMessage(self, "Can't diff. Save this ebuild first.", "Error", "error")
            return

        if not os.path.exists(this_ebuild):
            utils.MyMessage(self, "Can't diff. Save this ebuild first.", "Error", "error")
            return

        app = self.pref['diff']
        os.system("%s %s %s &" % (app, orig_ebuild, this_ebuild))

    def OnMnuFileCopy(self, event):
        """Copy from PORTDIR FILESDIR to PORTDIR_OVERLAY FILESDIR"""
        if not self.editing:
            return

        fdir_overlay = utils.GetEbuildDir(self)
        cat = utils.GetCategoryName(self)
        pn = utils.getPN(self)
        fdir_port = "%s/%s/%s" % (portdir, cat, pn)

        fdir = "%s/files" % fdir_overlay

        if not os.path.exists(fdir):
            dlg = wxMessageDialog(self, "${FILESDIR} does not exist.\n\nNo digest yet?", "Error", wxOK)
            dlg.ShowModal()
            dlg.Destroy()
            return

        if not os.path.exists(fdir_port):
            fdir_port = ""
        win = FileCopyDialog.wxFrame1(self, fdir_port, fdir_overlay)
        win.CenterOnScreen()
        win.Show(True)

    def OnMnuPref(self, event):
        """Modify preferences"""
        win = PrefsDialog.MyDialog(self, -1, "Preferences", \
                                  size=wxSize(350, 200), \
                                  style = wxDEFAULT_DIALOG_STYLE \
                                  )
        win.CenterOnScreen()
        val = win.ShowModal()
        if val == wxID_OK:
            self.pref['browser'] = win.text_ctrl_browser.GetValue()
            self.pref['xterm'] = win.text_ctrl_xterm.GetValue()
            self.pref['diff'] = win.text_ctrl_diff.GetValue()
            self.pref['editor'] = win.text_ctrl_editor.GetValue()
            self.pref['use'] = win.text_ctrl_USE.GetValue()
            self.pref['features'] = win.text_ctrl_FEATURES.GetValue()
            self.pref['userName'] = win.text_ctrl_userName.GetValue()
            self.pref['devUserName'] = win.text_ctrl_devUserName.GetValue()
            self.pref['cvsRoot'] = win.text_ctrl_cvs_root.GetValue()
            self.pref['stripHeader'] = win.checkbox_strip_header.GetValue()
            self.pref['externalControl'] = win.checkbox_external_control.GetValue()
            #print "int", int(win.checkbox_strip_header.GetValue())
            #print "raw", win.checkbox_strip_header.GetValue()
            self.pref['clearLog'] = win.checkbox_clear_log_window.GetValue()
            self.pref['checkSyntax'] = win.checkbox_check_syntax.GetValue()
            self.pref['logfile'] = win.checkbox_logfile.GetValue()
            self.pref['logFilename'] = win.text_ctrl_logfile.GetValue()
            self.pref['font'] = win.text_ctrl_font.GetValue()
            self.pref['highlighting'] = win.checkbox_highlight.GetValue()
            self.pref['gentooHighlight'] = win.checkbox_gentoo_highlighting.GetValue()
            self.pref['show_whitespace'] = win.checkbox_whitespace.GetValue()
            self.pref['tabsize'] = win.text_ctrl_1.GetValue()
            f = open(os.path.expanduser('~/.abeni/abenirc'), 'w')

            for v in self.pref.keys():
                f.write('%s = %s\n' % (v, self.pref[v]))
            f.close()
            self.ApplyPrefs()

    def ApplyPrefs(self):
        """Apply changes after getting prefs"""
        face, size = self.pref['font'].split(",")
        self.STCeditor.SetMyStyle() 
        self.STCeditor.StyleSetFontAttr(0, string.atoi(size), face, 0, 0, 0)
        ##comments: 1
        self.STCeditor.StyleSetFontAttr(1, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(2, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(3, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(4, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(5, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(6, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(7, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(8, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(9, string.atoi(size), face, 0, 0, 0)
        self.STCeditor.StyleSetFontAttr(10, string.atoi(size), face, 0, 0, 0)
        if self.pref['logfile'] == 1:
            self.logfile = open(self.pref['logFilename'], 'a')
        else:
            self.logfile = None

        #if self.pref['externalControl'] == 1:
        #self.ExternalControlListen()


    def ExternalControlListen(self):
        """Start timer to call ipc to get external vim commands"""
        ID_Timer = wxNewId()
        self.extTimer = wxTimer(self, ID_Timer)
        EVT_TIMER(self,  ID_Timer, self.OnExtTimer)
        self.extTimer.Start(2000)

    def OnExtTimer(self, evt):
        mq = pyipc.MessageQueue(100)
        data = mq.receive()
        if data:
            cmd, file = data.split("*")
            print "External command recvd:'%s'" % cmd
            if cmd[4:] == "digest":
                self.OnMnuCreateDigest(-1)
            if cmd[4:] == "unpack":
                self.OnToolbarUnpack(-1)
            if cmd[4:] == "compile":
                self.OnToolbarCompile(-1)
            if cmd[4:] == "install":
                self.OnToolbarInstall(-1)
            if cmd[4:] == "qmerge":
                self.OnToolbarQmerge(-1)

    def OnMnuHelpFkeys(self, event):
        """List fkeys"""
        about = HelpFkeysDialog.MyHelpFkeys(self)
        about.ShowModal()
        about.Destroy()

    def OnMnuHelpCVS(self, event):
        """Repoman CVS help for Gentoo devs"""
        about = HelpCVSDialog.MyHelpCVS(self)
        about.ShowModal()
        about.Destroy()
        event.Skip()

    def OnMnuAbout(self, event):
        """Obligitory About me and my app screen"""
        about = AboutDialog.MyAboutBox(self)
        about.ShowModal()
        about.Destroy()
        event.Skip()

    def OnMnuExport(self, event):
        """Export ebuild and auxiliary files as tarball"""
        if not self.editing:
            return
        utils.ExportEbuild(self)
        event.Skip()

    def OnMnuBugzilla(self, event):
        """Dialog to add bugzilla info"""
        if not self.editing:
            return
        dlg = BugzillaDialog.BugzillaDialog(self)
        dlg.CenterOnScreen()
        v = dlg.ShowModal()
        if v == wxID_OK:
            r = dlg.SaveInfo()
            dlg.Destroy()
        event.Skip()

    def OnMnuClearLog(self, event):
        """Clear the log window"""
        self.text_ctrl_log.SetValue('')
        event.Skip()

    def KillProc(self, event):
        """Kill processes when stop button clicked"""
        os.system("kill %s" % self.pid)
        utils.write(self, "Killed %s" % self.pid)
        try:
            pid = open("/var/run/abeni_proc.pid", "r").read().strip()
            os.system("kill %s" % pid)
            utils.write(self, "sub pid %s killed" % pid)
        except:
            pass
        event.Skip()

    def OnProcessEnded(self, evt):
        #utils.write('OnProcessEnded, pid:%s,  exitCode: %s\n' %
        #               (evt.GetPid(), evt.GetExitCode()))
        self.timer.Stop()
        stream = self.process.GetInputStream()
        if stream.CanRead():
            text = stream.read()
            text = text.split('\n')
            for t in text:
                utils.write(self, t)
        self.process.Destroy()
        self.process = None
        self.toolbar.EnableTool(self.StopID, False)
        self.running = None
        action = self.action
        self.action = None
        utils.PostAction(self, action)
        #This assures the log window positions at the bottom:
        utils.write(self, "   ")

    def GetCVScatPN(self):
        """returns CVSroot/category/PN"""
        cvs_dir = self.pref['cvsRoot']
        if not cvs_dir:
            return 0
        cat = utils.GetCategoryName(self)
        if not cat:
            return 0
        pn = utils.getPN(self)
        if not pn:
            return 0
        cvs_path = "%s/%s/%s" % (cvs_dir, cat, pn)
        if os.path.exists(cvs_path):
            return cvs_path
  
    def OnXtermInCVS(self, event):
        """Launch xterm in CVS dir"""
        if not self.editing:
            return

        cvs_dir = self.pref['cvsRoot']
        if not os.path.exists(cvs_dir):
            msg = "Path doesn't exist: %s\n\nSet your CVS root in Dev Prefs." % cvs_dir
            utils.MyMessage(self, msg, "Error", "error")
            return
        cat = utils.GetCategoryName(self)
        pn = utils.getPN(self)
        cvs_path = "%s/%s/%s" % (cvs_dir, cat, pn)
        if not os.path.exists(cvs_path):
            msg = "Path doesn't exist: %s" % cvs_path
            utils.MyMessage(self, msg, "Error", "error")
            return
        else:
            c = os.getcwd()
            os.chdir(cvs_path)
            if self.pref['xterm']:
                try:
                    os.system('%s &' % self.pref['xterm'])
                    os.chdir(c)
                except:
                    pass
            else:
                utils.MyMessage(self, "Set xterm in preferences", \
                  "Error - no xterm", "error")


    def OnXtermInD(self, event):
        """Launch xterm in ${D}"""
        if not self.editing:
            return

        if not utils.CheckUnpacked(self):
            msg = 'You need to unpack the package first.'
            utils.MyMessage(self, msg, "Error", "error")
        else:
            c = os.getcwd()
            p = utils.getP(self)
            d = '%s/portage/%s/image/' % (portage_tmpdir, p)
            if os.path.exists(d):
                os.chdir(d)
            else:
                msg = 'You need to run src_install() first.'
                utils.MyMessage(self, msg, "Error", "error")
                return
            if self.pref['xterm']:
                try:
                    os.system('%s &' % self.pref['xterm'])
                except:
                    pass
            else:
                utils.MyMessage(self, "Set xterm in preferences", \
                  "Error - no xterm", "error")
            os.chdir(c)


    def OnXtermInS(self, event):
        """Launch xterm in ${S}"""
        if not self.editing:
            return

        if not utils.CheckUnpacked(self):
            msg = 'You need to unpack the package first.'
            title = 'Error'
            utils.MyMessage(self, msg, title, "error")
        else:
            c = os.getcwd()
            p = utils.getP(self)
            mys = utils.GetS(self)
            if os.path.exists(self.s):
                os.chdir(self.s)
            elif os.path.exists(mys):
                os.chdir(mys)
            else:
                try:
                    os.chdir('%s/portage/%s/work/' % (portage_tmpdir, p))
                except:
                    pass
            xterm = self.pref['xterm']
            print xterm
            if xterm:
                #If using konsole, open a new instance if root isn't running one
                #If root is running one, open new tab (session) in it
                if string.find(xterm, 'konsole') != -1:
                    dcop = "/usr/kde/3.2/bin/dcop"
                    cmd = '%s |grep konsole' % dcop
                    err, out = utils.RunExtProgram(cmd)
                    inst = 0
                    if not err:
                        for l in out:
                            inst = l
                        if inst:
                            os.system('%s %s konsole newSession 2>&1 &' % (dcop, inst))
                            os.chdir(c)
                        else:
                            os.system('%s 2>&1 &' % xterm)
                            os.chdir(c)
                    else:
                        os.system('%s &' % xterm)
                        os.chdir(c)
                else:
                    try:
                        os.system('%s &' % xterm)
                        os.chdir(c)
                    except:
                        print "Abeni error: Couldn't launch xterm"
            else:
                utils.MyMessage(self, "Set xterm in preferences", \
                  "Error - no xterm", "error")

    def EditFile(self, f):
        """edit filename in external editor"""
        if not self.pref['editor']:
            utils.MyMessage(self, "No editor defined in perferences", \
                            "Error: no editor defined", "error")
            return
        os.system('%s %s &' % (self.pref['editor'], f))

    def OnMnuEdit(self, event=None, save=1, filename=''):
        """Launch external editor then reload ebuild after editor exits"""
        if self.editing:
            if not self.pref['editor']:
                utils.MyMessage(self, "No editor defined in perferences", \
                  "Error: no editor defined", "error")
            if save:
                if utils.SaveEbuild(self):
                    #utils.Reset(self)
                    wxSafeYield()
                    if not filename:
                        f = self.filename
                    else:
                        f = filename
                    os.system('%s %s' % (self.pref['editor'], f))
                    utils.LoadEbuild(self, f)

    def OnMnuRepomanScan(self, event):
        """Run repoman --pretend scan on this ebuild"""
        if not self.editing:
            return
        logMsg = "))) repoman --pretend scan\n))) Ignore warnings about ChangeLog and metadata.xml because we're in the overlay dir"
        cmd = 'cd %s;/usr/bin/repoman --pretend scan' % self.ebuildDir
        utils.ExecuteInLog(self, cmd, logMsg)

    def OnMnuRepomanFull(self, event):
        """Run repoman --pretend full on this ebuild"""
        if not self.editing:
            return
        logMsg = "))) repoman --pretend full\n))) Ignore warnings about metadata.xml because we're in the overlay dir"
        cmd = 'cd %s;/usr/bin/repoman --pretend full' % self.ebuildDir
        utils.ExecuteInLog(self, cmd, logMsg)

    def OnMnuEmerge(self, event):
        """Run 'emerge <options> <this ebuild>' """
        if not self.editing:
            return
        if not utils.VerifySaved(self):
            win = EmergeDialog.EmergeDialog(self, -1, "Enter emerge options", \
                                size=wxSize(350, 350), \
                                style = wxDEFAULT_DIALOG_STYLE \
                                )
            win.CenterOnScreen()
            val = win.ShowModal()
            if val == wxID_OK:
                #cmd = "ACCEPT_KEYWORDS='%s' FEATURES='%s' USE='%s' emerge --nospinner =%s" \
                cmd = "ACCEPT_KEYWORDS='%s' FEATURES='%s' USE='%s' %s" \
                      % (win.kw.GetValue(), win.features.GetValue(), win.use.GetValue(),\
                      win.emerge.GetValue())
                logMsg = "))) %s" % cmd
                utils.ExecuteInLog(self, cmd, logMsg)

    def OnMnuEbuild(self, event):
        """Run 'ebuild <file> <cmd>' """
        if not self.editing:
            return
        c = ['setup', 'depend', 'merge', 'qmerge', 'unpack',
             'compile', 'rpm', 'package', 'prerm', 'postrm',
             'preinst', 'postinst', 'config', 'touch', 'clean',
             'fetch', 'digest', 'install', 'unmerge']
        c.sort()
        dlg = wxSingleChoiceDialog(self, 'Command:', 'ebuild command',
                                   c, wxOK|wxCANCEL)
        if dlg.ShowModal() == wxID_OK:
            opt = dlg.GetStringSelection()
            dlg.Destroy()
        else:
            dlg.Destroy()
            return

        if not utils.VerifySaved(self):
            if opt == 'setup':
                self.action = 'setup'
            cmd = 'USE="%s" FEATURES="%s" /usr/sbin/ebuild %s %s' % \
              (self.pref['use'], self.pref['features'], self.filename, opt)
            logMsg = "))) Executing:\n"
            logMsg += ")))   USE='%s' FEATURES='%s'\n" % (self.pref['use'], self.pref['features'])
            logMsg += ")))   ebuild %s %s" % (self.filename, opt)
            utils.ExecuteInLog(self, cmd, logMsg)


# end of class MyFrame

class MyLog(wxPyLog):
    def __init__(self, textCtrl, logTime=0):
        wxPyLog.__init__(self)
        self.tc = textCtrl
        self.logTime = logTime

    def DoLogString(self, message, timeStamp):
        #TODO: Add option in Global prefs:
        #if self.logTime:
        #    message = time.strftime("%X", time.localtime(timeStamp)) + \
        if self.tc:
            self.tc.AppendText(message + '\n')


class GentooSTC(wxStyledTextCtrl):

    """Main editor widget"""

    def __init__(self, parent, ID):
        wxStyledTextCtrl.__init__(self, parent, ID,
                                  style = wxNO_FULL_REPAINT_ON_RESIZE)
        self.parent = parent
        #Increase text size
        self.CmdKeyAssign(ord('B'), wxSTC_SCMOD_CTRL, wxSTC_CMD_ZOOMIN)
        #Decrease text size
        self.CmdKeyAssign(ord('N'), wxSTC_SCMOD_CTRL, wxSTC_CMD_ZOOMOUT)
        self.Colourise(0, -1)
        # line numbers in the margin
        self.SetMarginType(1, wxSTC_MARGIN_NUMBER)
        self.SetMarginWidth(1, 25)
        # No bash lexer. Maybe there is a better than Python?
        self.SetLexer(wxSTC_LEX_PYTHON)
        #self.SetLexer(wxSTC_LEX_AUTOMATIC)

        gentooKeywords = 'FILESDIR WORKDIR PV P PN PVR D S DESCRIPTION HOMEPAGE SRC_URI LICENSE SLOT KEYWORDS IUSE DEPEND RDEPEND insinto docinto glibc_version ewarn replace-flags env-update filter-flags inherit pkg_postinst pkg_postrm pkg_preinst pkg_setup src_unpack src_install pkg_prerm pkg_nofetch pkg_config unpack src_compile dodir pkg_mv_plugins src_mv_plugins einfo epatch use has_version best_version use_with use_enable doexe exeinto econf emake dodoc dohtml dobin dosym einstall check_KV keepdir die einfo eerror into dohard doinfo doins dolib dolib.a dolib.so doman domo donewins dosbin dosed fowners fperms newbin newdoc newexe newins newlib.a newlib.so newman newsbin pmake prepalldocs prepallinfo prepallman prepall addwrite replace-sparc64-flags edit_makefiles'
        self.SetKeyWords(0, gentooKeywords)
        self.SetProperty("fold", "0")
        # Leading spaces are bad in Gentoo ebuilds!
        self.SetProperty("tab.timmy.whinge.level", "3") 
        self.SetMargins(0,0)
        self.SetUseTabs(1)
        self.SetBufferedDraw(False)

        self.SetEdgeMode(wxSTC_EDGE_BACKGROUND)
        self.SetEdgeColumn(80)

        self.SetMarginWidth(2, 12)

        self.SetCaretForeground("BLUE")
        self.SetMyStyle()
        EVT_STC_SAVEPOINTLEFT(self, -1, self.UnsavedTitle)
        EVT_STC_SAVEPOINTREACHED(self, -1, self.SavedTitle)

    def SetMyStyle(self):
        try:
            my_face, my_size = options.Options().Prefs()['font'].split(",")
        except:
            my_face = "Courier"
            my_size = "12"
        my_size = string.atoi(my_size)
        faces = { 'mono' : my_face,
            'size' : my_size,
            'size2': 10,
            }

        self.SetViewWhiteSpace(int(options.Options().Prefs()['show_whitespace']))
        self.SetTabWidth(int(options.Options().Prefs()['tabsize']))
        self.StyleClearAll()

        self.StyleSetSpec(wxSTC_STYLE_DEFAULT,     "face:%(mono)s,size:%(size)d" % faces)
        #self.StyleSetSpec(wxSTC_STYLE_DEFAULT, 'fore:#000000,back:#FFFFFF,face:Courier,size:12')
    
        self.StyleSetSpec(wxSTC_STYLE_LINENUMBER,  "back:#C0C0C0,face:%(mono)s,size:%(size2)d" % faces)
        self.StyleSetSpec(wxSTC_STYLE_CONTROLCHAR, "face:%(mono)s" % faces)
        self.StyleSetSpec(wxSTC_STYLE_BRACELIGHT,  "fore:#FFFFFF,back:#0000FF,bold")
        self.StyleSetSpec(wxSTC_STYLE_BRACEBAD,    "fore:#000000,back:#FF0000,bold")
        self.StyleSetSpec(wxSTC_P_DEFAULT, "fore:#808080,face:%(mono)s,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_COMMENTLINE, "fore:#007F00,face:%(mono)s,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_NUMBER, "fore:#007F7F,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_STRING, "fore:#7F007F,bold,face:%(mono)s,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_CHARACTER, "fore:#7F007F,bold,face:%(mono)s,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_WORD, "fore:#00007F,bold,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_TRIPLE, "fore:#7F0000,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_TRIPLEDOUBLE, "fore:#7F0000,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_CLASSNAME, "fore:#0000FF,bold,underline,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_DEFNAME, "fore:#007F7F,bold,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_OPERATOR, "bold,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_IDENTIFIER,"face:%(mono)s,size:%(size)d" % faces) 
        self.StyleSetSpec(wxSTC_P_COMMENTBLOCK, "fore:#7F7F7F,size:%(size)d" % faces)
        self.StyleSetSpec(wxSTC_P_STRINGEOL, "fore:#000000,face:%(mono)s,eol,size:%(size)d" % faces)


    
    def UnsavedTitle(self, evt):
        ''' Set application's titlebar '''
        utils.DoTitle(self.parent.GetParent())
 
    def SavedTitle(self, evt):
        ''' Set application's titlebar '''
        utils.DoTitle(self.parent.GetParent()) 

